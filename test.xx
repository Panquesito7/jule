// X test codes

type TEST_TYPEDEF i32

TEST_GLOBAL: = 10

test_string_concat() {
  ("Hello" + " " + "World!")
}

test_variable() {
  a:i32
  x: = 10;
  x = 100
  outln(x);
}

test_assignment() {
  x: = 10
  x += 100;
}

test_array() {
  my_array: = new [][]str
  *my_array = [][]str{
    []str{"Apple", "Banana"},
    []str{"Bred", "Cheese"},
  };
  outln(
    (*my_array)[0]
  )
}

test_anonymous_function() {
  my_func:() = () {
    outln("Hello World!")
  }
  my_func()
  rf: = () i32 {
    ret 90
  }()
}

test_multiple_variable() {
  a:i32 = 10;
  a, b:, _, c:bool = 100, 200, nil, false
  a, b = 10, 20
  a, b = b, a
  outln(a)
  outln(b)
  a, b, _ = test_multiple_return()
}

test_multiple_return() [i32, i32, bool] {
  < 5, 5, false
}

test_heap_allocation() {
  x: = new i32
  *x = 8429
  outln(x)
  outln(*x)
}

test_free_allocation() {
  x: = new *i32
  *x = new i32
  *(*x) = 90
  outln(*(*x))
  free *x
  free x
  x = nil
}

test_iter() {
  // Infinity iteration
  iter {
    break
    continue
  }

  // While iteration
  iter !false {
    break
  }
}

main()  {
  test_string_concat();
  test_variable();
  test_assignment()
  test_array()
  test_anonymous_function()
  test_multiple_variable();
  test_heap_allocation()
  test_free_allocation()
  test_iter()
}
