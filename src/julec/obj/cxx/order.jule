// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::sema::{Struct, Var}

// Reports whether struct in correct order by dependencies.
fn is_struct_ordered(structs: []&Struct, s: &Struct): bool {
	for _, d in s.depends {
		for _, ss in structs {
			if &ss == &s {
				ret false
			} else if &ss == &d {
				break
			}
		}
	}

	ret true
}

// Orders structures by their dependencies.
// Struct's dependencies always comes first itself.
fn order_structures(mut structs: []&Struct) {
	let n = structs.len
	let mut i = 0
	for i < n; i++ {
		let mut swapped = false

		let mut j = 0
		for j < n-i-1; j++ {
			if structs[j].depends.len > 1 {
				structs[j], structs[j+1] = structs[j+1], structs[j]
				swapped = true
			}
		}

		if !swapped {
			break
		}
	}

	i = 0
	for i < n; i++ {
		let mut swapped = false

		let mut j = 0
		for j < n-i-1; j++ {
			if !is_struct_ordered(structs, structs[j]) {
				structs[j], structs[j+1] = structs[j+1], structs[j]
				swapped = true
			}
		}

		if !swapped {
			break
		}
	}
}

// Reports whether variable in correct order by dependencies.
fn is_var_ordered(vars: []&Var, v: &Var): bool {
	for _, d in v.depends {
		for _, vv in vars {
			if &vv == &v {
				ret false
			} else if &vv == &d {
				break
			}
		}
	}

	ret true
}

// Orders variables by their dependencies.
// Variable's dependencies always comes first itself.
fn order_variables(mut vars: []&Var) {
	let n = vars.len
	let mut i = 0
	for i < n; i++ {
		let mut swapped = false

		let mut j = 0
		for j < n-i-1; j++ {
			if !is_var_ordered(vars, vars[j]) {
				vars[j], vars[j+1] = vars[j+1], vars[j]
				swapped = true
			}
		}

		if !swapped {
			break
		}
	}
}
