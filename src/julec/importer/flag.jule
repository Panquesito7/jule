// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use env

use std::jule::build::{Os, Arch, is_unix, is_32bit, is_64bit}

static mut FLAGS: []str = nil

// Set operating system flags by native operating system.
fn set_os_flags() {
    match env::OS {
    | str(Os.Windows): FLAGS = append(FLAGS, str(Os.Windows))
    | str(Os.Linux):   FLAGS = append(FLAGS, str(Os.Linux))
    | str(Os.Darwin):  FLAGS = append(FLAGS, str(Os.Darwin))
    }

    if is_unix(env::OS) {
        FLAGS = append(FLAGS, str(Os.Unix))
    }
}

// Set architecture flags by native architecture.
fn set_arch_flags() {
    match env::ARCH {
    | str(Arch.I386):  FLAGS = append(FLAGS, str(Arch.I386))
    | str(Arch.Amd64): FLAGS = append(FLAGS, str(Arch.Amd64))
    | str(Arch.Arm64): FLAGS = append(FLAGS, str(Arch.Arm64))
    }

    if is_64bit(env::ARCH) {
        FLAGS = append(FLAGS, str(Arch.Bit64))
    }
    if is_32bit(env::ARCH) {
        FLAGS = append(FLAGS, str(Arch.Bit32))
    }
}

// Initialize directive eval flags.
pub fn init_flags() {
    set_os_flags()
    set_arch_flags()
}
