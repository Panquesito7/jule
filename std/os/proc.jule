// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

cpp fn __julec_get_command_line_args() []str

const COMMAND_LINE_ARGS_SPECIAL_CHARSET = `"'<>`

// Returns an absolute path name of the current working
// directory of the calling process.
pub fn getwd() (path: str, ok: bool) {
    ret __getwd()
}

// Holds the command-line arguments.
// Starts with the program name.
//
// Special bytes trimmed if program name have
// any special byte at begin or end.
// Special bytes are: " ' < >
//
// Command-line arguments sets at runtime with init function.
// Initialize expression is nil.
// You got nil slice if used as initialize expression to any global.
pub let ARGS: []str = nil

fn setup_command_line_args() {
    let mut args = cpp.__julec_get_command_line_args()
    let arg = args[0]
    let mut start = -1
    let mut end = -1
    for i, b in arg {
        if (start == -1 &&
            !COMMAND_LINE_ARGS_SPECIAL_CHARSET.has_prefix( (str)(b) )) {
            start = i
        }
        // -1 for correct reverse indexing
        let end_index = arg.len-i-1
        if (end == -1) {
            let end_byte = arg[end_index]
            if !COMMAND_LINE_ARGS_SPECIAL_CHARSET.has_prefix( (str)(end_byte) ) {
                // +1 for include this byte
                end = end_index + 1
            }
        }
        if start != -1 && end != -1 {
            break
        }
    }
    args[0] = arg[start:end]
    unsafe {
        // Break immutability for set parsed command-line arguments
        let mut mut_args = &ARGS
        *mut_args = args
    }
}

fn init() {
    setup_command_line_args()
}
