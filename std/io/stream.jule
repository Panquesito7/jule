// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integrated for std::jule::integrated
use err for std::errors
use std::fs::{FsError, File}

// Reader trait mask for stream reader.
pub trait Reader {
    // Read bytes to buffer from stream and returns readed byte count.
    // The number of bytes readed can never exceed the length of the buff.
    // If the buff is larger than the number of bytes that can be read,
    // the buffer will not cause an overflow.
    // Returns 0 if error occurs.
    pub fn read(mut self, mut buff: []byte): (n: int, err: Error)
}

// Reader trait mask for stream writer.
pub trait Writer {
    // Writes bytes to stream and returns writed byte count.
    // The number of bytes written can never exceed the length of the buff.
    // Returns 0 if error occurs.
    pub fn write(mut self, buff: []byte): (n: int, err: Error)
}

// Stream trait mask for R/W streams.
pub trait Stream {
    // Derived from Reader trait.
    pub fn read(mut self, mut buff: []byte): (n: int, err: Error)
    // Derived from Writer trait.
    pub fn write(mut self, buff: []byte): (n: int, err: Error)
}

// Stream implementation for file handles.
pub struct FileStream {
    buff: &File
}

impl FileStream {
    // Returns new FileStream instance for file.
    pub static fn new(mut f: &File): &FileStream {
        ret &FileStream{buff: f}
    }
}

impl Reader for FileStream {} // Implemented by Stream trait
impl Writer for FileStream {} // Implemented by Stream trait

impl Stream for FileStream {
    pub fn read(mut self, mut buff: []byte): (n: int, err: Error) {
        let (n, fserr) = self.buff.read(buff)
        if fserr != FsError.Ok {
            ret 0, err::new(integrated::to_str(fserr))
        }
        ret n, nil
    }

    pub fn write(mut self, buff: []byte): (n: int, err: Error) {
        let (n, fserr) = self.buff.write(buff)
        if fserr != FsError.Ok {
            ret 0, err::new(integrated::to_str(fserr))
        }
        ret n, nil
    }
}
