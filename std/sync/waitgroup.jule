// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::sync::atomic

// Do not copy an instance of WaitGroup, use a ref or pointer instead.
//
// usage: in main thread:
// `wg: std::sync::WaitGroup
// `wg.add(delta)` before starting tasks with `co ...`
// `wg.wait()` to wait for all tasks to have finished
//
// in each parallel job:
// `wg.done()` when finished
pub struct WaitGroup {
	task_n: u32       // current task count - reading/writing should be atomic
	wait_n: u32       // current wait count - reading/writing should be atomic
}

impl WaitGroup {
	// Increments (+delta) or decrements (-delta) task count by delta
	// and unblocks any wait() calls if task count becomes zero.
	// Panics if task count reaches below zero.
	pub fn add(delta: int) {
		let old_nr_tasks = int(unsafe{ std::sync::atomic::add_u32(&.task_n, u32(delta)) })
		let new_nr_tasks = old_nr_tasks + delta
		if new_nr_tasks < 0 {
			panic("Negative number of tasks in WaitGroup")
		}

		if new_nr_tasks != 0 {
			ret
		}

		let mut n_waiters = unsafe{ std::sync::atomic::load_u32(&.wait_n) }
		if n_waiters == 0 {
			ret
		}
		// clear waiters
		for {
			_ = unsafe{ std::sync::atomic::compare_swap_u32(&.wait_n, n_waiters, 0) }
			if n_waiters == 0 {
				ret
			}
			n_waiters = unsafe{ std::sync::atomic::load_u32(&.wait_n) }
		}
	}

	// Decrements the WaitGroup counter by one.
	pub fn done() { .add(-1) }

	// Blocks until all tasks are done (task count becomes zero)
	pub fn wait() {
		let nr_tasks = int(unsafe{ std::sync::atomic::load_u32(&.task_n) })
		if nr_tasks == 0 {
			// no need to wait
			ret
		}
		_ = unsafe{ std::sync::atomic::add_u32(&.wait_n, 1) }
		// blocks until task_n becomes 0
		for (unsafe{ std::sync::atomic::load_u32(&.wait_n) }) != 0 {}
	}
}
