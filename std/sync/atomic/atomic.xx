// Copyright 2022 The X Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use cpp "atomic.hpp"

cpp __xxc_atomic_swap_i32(addr *i32, new i32) [old i32]
cpp __xxc_atomic_swap_i64(addr *i64, new i64) [old i64]
cpp __xxc_atomic_swap_u32(addr *u32, new u32) [old u32]
cpp __xxc_atomic_swap_u64(addr *u64, new u64) [old u64]
cpp __xxc_atomic_swap_uintptr(addr *uintptr, new uintptr) [old uintptr]
cpp __xxc_atomic_compare_swap_i32(addr *i32, old, new i32) [swapped bool]
cpp __xxc_atomic_compare_swap_i64(addr *i64, old, new i64) [swapped bool]
cpp __xxc_atomic_compare_swap_u32(addr *u32, old, new u32) [swapped bool]
cpp __xxc_atomic_compare_swap_u64(addr *u64, old, new u64) [swapped bool]
cpp __xxc_atomic_compare_swap_uintptr(addr *uintptr, old, new uintptr) [swapped bool]
cpp __xxc_atomic_add_i32(addr *i32, delta i32) [old i32]
cpp __xxc_atomic_add_i64(addr *i64, delta i64) [old i64]
cpp __xxc_atomic_add_u32(addr *u32, delta u32) [old u32]
cpp __xxc_atomic_add_u64(addr *u64, delta u64) [old u64]
cpp __xxc_atomic_add_uintptr(addr *uintptr, delta uintptr) [old uintptr]
cpp __xxc_atomic_load_i32(addr *i32) i32
cpp __xxc_atomic_load_i64(addr *i64) i64
cpp __xxc_atomic_load_u32(addr *u32) u32
cpp __xxc_atomic_load_u64(addr *u64) u64
cpp __xxc_atomic_load_uintptr(addr *uintptr) uintptr
cpp __xxc_atomic_store_i32(addr *i32, val i32)
cpp __xxc_atomic_store_i64(addr *i64, val i64)
cpp __xxc_atomic_store_u32(addr *u32, val u32)
cpp __xxc_atomic_store_u64(addr *u64, val u64)
cpp __xxc_atomic_store_uintptr(addr *uintptr, val uintptr)

//doc: Atomically stores new into *addr and returns the previous *addr value.
@inline
pub swap_i32(addr *i32, new i32) [old i32] {
	ret cpp.__xxc_atomic_swap_i32(addr, new)
}

//doc: Atomically stores new into *addr and returns the previous *addr value.
@inline
pub swap_i64(addr *i64, new i64) [old i64] {
	ret cpp.__xxc_atomic_swap_i64(addr, new)
}

//doc: Atomically stores new into *addr and returns the previous *addr value.
@inline
pub swap_u32(addr *u32, new u32) [old u32] {
	ret cpp.__xxc_atomic_swap_u32(addr, new)
}

//doc: Atomically stores new into *addr and returns the previous *addr value.
@inline
pub swap_u64(addr *u64, new u64) [old u64] {
	ret cpp.__xxc_atomic_swap_u64(addr, new)
}

//doc: Atomically stores new into *addr and returns the previous *addr value.
@inline
pub swap_uinptr(addr *uintptr, new uintptr) [old uintptr] {
	ret cpp.__xxc_atomic_swap_uintptr(addr, new)
}

//doc: Executes the compare-and-swap operation for an i32 value.
@inline
pub compare_swap_i32(addr *i32, old, new i32) [swapped bool] {
	ret cpp.__xxc_atomic_compare_swap_i32(addr, old, new)
}

//doc: Executes the compare-and-swap operation for an i64 value.
@inline
pub compare_swap_i64(addr *i64, old, new i64) [swapped bool] {
	ret cpp.__xxc_atomic_compare_swap_i64(addr, old, new)
}

//doc: Executes the compare-and-swap operation for an u32 value.
@inline
pub compare_swap_u32(addr *u32, old, new u32) [swapped bool] {
	ret cpp.__xxc_atomic_compare_swap_u32(addr, old, new)
}

//doc: Executes the compare-and-swap operation for an u64 value.
@inline
pub compare_swap_u64(addr *u64, old, new u64) [swapped bool] {
	ret cpp.__xxc_atomic_compare_swap_u64(addr, old, new)
}

//doc: Executes the compare-and-swap operation for an uintptr value.
@inline
pub compare_swap_uintptr(addr *uintptr, old, new uintptr) [swapped bool] {
	ret cpp.__xxc_atomic_compare_swap_uintptr(addr, old, new)
}

//doc: Atomically adds delta to *addr and returns the old value.
@inline
pub add_i32(addr *i32, delta i32) [old i32] {
	ret cpp.__xxc_atomic_add_i32(addr, delta)
}

//doc: Atomically adds delta to *addr and returns the old value.
@inline
pub add_i64(addr *i64, delta i64) [old i64] {
	ret cpp.__xxc_atomic_add_i64(addr, delta)
}

//doc: Atomically adds delta to *addr and returns the old value.
@inline
pub add_u32(addr *u32, delta u32) [old u32] {
	ret cpp.__xxc_atomic_add_u32(addr, delta)
}

//doc: Atomically adds delta to *addr and returns the old value.
@inline
pub add_u64(addr *u64, delta u64) [old u64] {
	ret cpp.__xxc_atomic_add_u64(addr, delta)
}

//doc: Atomically adds delta to *addr and returns the old value.
@inline
pub add_uinptr(addr *uintptr, delta uintptr) [old uintptr] {
	ret cpp.__xxc_atomic_add_uintptr(addr, delta)
}

//doc: Atomically loads *addr.
@inline
pub load_i32(addr *i32) i32 {
	ret cpp.__xxc_atomic_load_i32(addr)
}

//doc: Atomically loads *addr.
@inline
pub load_i64(addr *i64) i64 {
	ret cpp.__xxc_atomic_load_i64(addr)
}

//doc: Atomically loads *addr.
@inline
pub load_u32(addr *u32) u32 {
	ret cpp.__xxc_atomic_load_u32(addr)
}

//doc: Atomically loads *addr.
@inline
pub load_u64(addr *u64) u64 {
	ret cpp.__xxc_atomic_load_u64(addr)
}

//doc: Atomically loads *addr.
@inline
pub load_uinptr(addr *uintptr) uintptr {
	ret cpp.__xxc_atomic_load_uintptr(addr)
}

//doc: Atomically stores val into *addr.
@inline
pub store_i32(addr *i32, val i32) { cpp.__xxc_atomic_store_i32(addr, val) }

//doc: Atomically stores val into *addr.
@inline
pub store_i64(addr *i64, val i64) { cpp.__xxc_atomic_store_i64(addr, val) }

//doc: Atomically stores val into *addr.
@inline
pub store_u32(addr *u32, val u32) { cpp.__xxc_atomic_store_u32(addr, val) }

//doc: Atomically stores val into *addr.
@inline
pub store_u64(addr *u64, val u64) { cpp.__xxc_atomic_store_u64(addr, val) }

//doc: Atomically stores val into *addr.
@inline
pub store_uinptr(addr *uintptr, val uintptr) { cpp.__xxc_atomic_store_uintptr(addr, val) }
