// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use cpp "unsafe.hpp"

type[T]
cpp fn __julec_uintptr_cast_to_raw(addr: uintptr) *T

// Wrapper structure for voidptr.
pub struct Voidptr {
	ptr: uintptr
}

impl Voidptr {
	// Returns casted raw pointer of given type.
	//
	//jule:typearg
	type[T]
	pub fn &cast() *T {
		ret cpp.__julec_uintptr_cast_to_raw[T](.ptr)
	}

	// Returns unsafe pointer of given type.
	//
	//jule:inline
	//jule:typearg
	type[T]
	pub fn &to_ptr() Ptr[T] {
		ret ptr_from[T](.ptr)
	}
}

impl Pointer for Voidptr {
	//jule:inline
	fn &addr() uintptr {
		ret .ptr
	}
}

// Returns unsafe voidptr for given raw pointer.
//
//jule:inline
type[T]
pub fn voidptr_of(ptr: *T) Voidptr {
	ret voidptr_from(uintptr(ptr))
}

// Returns unsafe voidptr from given address.
//
//jule:inline
pub fn voidptr_from(addr: uintptr) Voidptr {
	ret Voidptr{
		ptr: addr
	}
}
