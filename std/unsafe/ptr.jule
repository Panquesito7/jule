// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use cpp "unsafe.hpp"

type[T]
cpp fn __julec_uintptr_cast_to_raw(addr: uintptr) *T

// Wrapper structure for unsafe raw pointer.
type[T]
pub struct Ptr {
	ptr: uintptr
}

impl Ptr {
	// Returns unsafe pointer as unsafe voidptr.
	pub fn &to_voidptr() Voidptr {
		ret voidptr_from(.ptr)
	}

	// Moves the pointer from its pointing position by the size of the data type.
	// The offset amount is determined by n.
	// Moving back requires a negative expression,
	// and moving forward requires a positive expression.
	//
	// Special cases are:
	//  move(n) = address sets as zero (nil)
	pub fn &move(n: int) {
		.ptr += n * sizeof_t(T)
	}

	// Returns data of pointer.
	pub fn &get() T {
		ret *cpp.__julec_uintptr_cast_to_raw[T](.ptr)
	}
}

impl Pointer for Ptr {
	fn &addr() uintptr {
		ret .ptr
	}
}

// Returns unsafe pointer for given raw pointer.
type[T]
pub fn ptr_of(ptr: *T) Ptr[T] {
	ret ptr_from[T](uintptr(ptr))
}

// Returns unsafe pointer from given address.
type[T]
pub fn ptr_from(addr: uintptr) Ptr[T] {
	ret Ptr[T]{
		ptr: addr,
	}
}
