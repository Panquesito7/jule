// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// This is a error handling trait of standard library.
// It is used for error handling and panics.
//
// Example to error handling:
// You have a "div" method have two f64 parameter: "x" and "y".
// This function returns division of given arguments.
// Actually returns: (f64, Error)
// The first return value naturally result of computation.
// Returns result and empty Error for if the "x" and "y" is not equals to 0.
// If not, returns 0 and returns Error instance with error message.
// You can handle errors like that;
//
// let (result, err) = div(x, y)
// if err != nil {
//   // If has error...
// }
trait Error {
	fn error(): str
}
