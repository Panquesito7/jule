// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::sys::{open_dir, get_last_errno}

// Directory entry.
pub struct Dirent {
	pub name: str
	pub stat: Stat // TODO: review here
}

// Reads the named directory and returs all its directory entries can read.
// Returns nil if no any dirent or error occurs.
//
// Possible errors:
//  Denied InvalidDescriptor PerProcessLimit SystemWideLimit
//  NotExist InsufficientMemory NotDir
pub fn read_dir(path: str): ([]Dirent, FsError) {
	let mut stream = open_dir(path)
	if !real(stream) {
		ret nil, get_fs_error_from_errno(get_last_errno())
	}
	let mut dirents: []Dirent = nil
	for {
		let dirent = stream.read()
		if !real(dirent) {
			break
		}
		dirents = append[Dirent](dirents, Dirent{
			name: dirent.d_name(),
		})
	}
	_ = stream.close()
	ret dirents, FsError.Ok
}
