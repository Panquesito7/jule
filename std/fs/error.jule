// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::sys::{
	errno,
	EACCES,
	EIO,
	ELOOP,
	ENAMETOOLONG,
	ENOENT,
	ENOTDIR,
	EOVERFLOW,
	EBADF,
	EMFILE,
	ENFILE,
	ENOMEM,
}

// File system error codes.
pub enum FsError {
	Ok,                 // No problem.
	Denied,             // Search permission is denied for a component of the path prefix.
	IO,                 // Input/Output error, an error occurred while reading from the file system.
	Loop,               // A loop exists in symbolic links encountered during resolution of the path argument.
	LongPath,           // The length of the path argument exceeds maxium path length or a pathname component is longer than maximum name length.
	NotExist,           // A component of path does not name an existing file or path is an empty string.
	NotDir,             // A component of the path prefix is not a directory.
	Overflow,           // The file size in bytes or the number of blocks allocated to the file or the file serial number cannot be represented correctly in the structure pointed to by buf.
	InvalidDescriptor,  // fd is not a valid file descriptor opened for reading.
	PerProcessLimit,    // The per-process limit on the number of open file descriptors has been reached.
	SystemWideLimit,    // The system-wide limit on the total number of open files has been reached.
	InsufficientMemory, // Insufficient memory to complete the operation.
}

fn get_fs_error_from_errno(err: errno): FsError {
	match err {
	| EACCES:      ret FsError.Denied
	| EIO:          ret FsError.IO
	| ELOOP:        ret FsError.Loop
	| ENAMETOOLONG: ret FsError.LongPath
	| ENOENT:       ret FsError.NotExist
	| ENOTDIR:      ret FsError.NotDir
	| EOVERFLOW:    ret FsError.Overflow
	| EBADF:        ret FsError.InvalidDescriptor
	| EMFILE:       ret FsError.PerProcessLimit
	| ENFILE:       ret FsError.SystemWideLimit
	| ENOMEM:       ret FsError.InsufficientMemory
	|:              ret FsError.Ok
	}
}
