// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::sys::{
	self,
	seek,
	read,
	write,
	close
}

// Flags to open wrapping those of the underlying system.
// Not all flags may be implemented on a given system.
// Exactly one of O_RDONLY, O_WRONLY, or O_RDWR must be specified.
pub const O_RDONLY = std::sys::O_RDONLY // open the file read-only
pub const O_WRONLY = std::sys::O_WRONLY // open the file write-only
pub const O_RDWR   = std::sys::O_RDWR   // open the file read-write
pub const O_APPEND = std::sys::O_APPEND // append data to the file when writing
pub const O_CREAT  = std::sys::O_CREAT  // create a new file if none exists
pub const O_EXCL   = std::sys::O_EXCL   // used with O_CREAT, file must not exist
pub const O_SYNC   = std::sys::O_SYNC   // open for synchronous I/O
pub const O_TRUNC  = std::sys::O_TRUNC  // truncate regular writable file when opened

// Seek whence values.
pub const SEEK_SET = 0 // seek relative to the origin of the file
pub const SEEK_CUR = 1 // seek relative to the current offset
pub const SEEK_END = 2 // seek relative to the end

// The file stream handle.
pub struct File {
	handle: int
}

impl File {
	// Sets offset to next Read/Write operation and returns the new offset.
	// whence: 0 (SEEK_SET) means, relative to the origin of the file, 1 (SEEK_CUR)
	// means relative to the current offset, and 2 (SEEK_END) means relative to end.
	// Return 0 if error occurs.
	//
	// Possible errors:
	//  InvalidDescriptor SyncIO Overflow Seek
	pub fn seek(mut self, offset: i64, origin: int): (i64, FsError) {
		let pos = seek(self.handle, offset, origin)
		ret pos, FsError.Ok
	}

	// Read bytes to buffer from handle and returns readed byte count.
	// The number of bytes readed can never exceed the length of the buff.
	// If the buff is larger than the number of bytes that can be read,
	// the buffer will not cause an overflow. Offset will be shifted
	// by the number of bytes read.
	// Returns 0 if error occurs.
	//
	// Possible errors:
	//  Retry InvalidDescriptor Signal SyncIO IO IsDir Overflow Buffer
	//  InsufficientMemory Divice Seek
	pub fn read(mut self, mut buff: []byte): (n: int, FsError) {
		n = unsafe { read(self.handle, &buff[0], uint(buff.len)) }
		if n == -1 {
			n = 0
			ret n, get_last_fs_error()
		}
		ret n, FsError.Ok
	}

	// Writes bytes to handle and returns writed byte count.
	// The number of bytes written can never exceed the length of the buff.
	// Returns 0 if error occurs.
	//
	// Possible errors:
	//  Retry InvalidDescriptor Big Signal IO NoSpace Pipe Range SyncIO
	//  Seek Divice Buffer
	pub fn write(mut self, buff: []byte): (n: int, FsError) {
		n = unsafe { write(self.handle, &buff[0], uint(buff.len)) }
		if n == -1 {
			n = 0
			ret n, get_last_fs_error()
		}
		ret n, FsError.Ok
	}

	// Closes file handle.
	//
	// Possible errors:
	//  InvalidDescriptor Signal IO
	pub fn close(mut self): FsError {
		if close(self.handle) == -1 {
			ret get_last_fs_error()
		}
		ret FsError.Ok
	}
}
