// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use integrated for std::jule::integrated
use sys for std::sys

// Seek whence values.
pub enum Seek: int {
    Set = 0, // Seek relative to the origin of the file
    Cur = 1, // Seek relative to the current offset
    End = 2, // Seek relative to the end
}

// Flags to open wrapping those of the underlying system.
// Not all flags may be implemented on a given system.
// Exactly one of Rdonly, Wronly, or Rdwr must be specified.
pub enum OFlag: int {
    Rdonly = sys::O_RDONLY, // Open the file read-only
    Wronly = sys::O_WRONLY, // Open the file write-only
    Rdwr   = sys::O_RDWR,   // Open the file read-write
    Append = sys::O_APPEND, // Append data to the file when writing
    Create = sys::O_CREAT,  // Create a new file if none exists
    Excl   = sys::O_EXCL,   // Used with OFlag.Create, file must not exist
    Sync   = sys::O_SYNC,   // Open for synchronous I/O
    Trunc  = sys::O_TRUNC,  // Truncate regular writable file when opened
}

// The file stream handle.
//
// It works like a wrapper when it comes to console handle like
// stdin, stdout or stderr. Read and write functions are supported
// for console handlers. The rest of the functions are not supported
// and not checked, it is undefined behavior.
//
// There may be system call differences and performance differences
// for console handlers depending on the operating system.
// For example, Windows has an overhead for UTF-16 processing.
pub struct File {
    handle: uintptr
}

impl File {
    // Returns new &File by handle.
    pub static fn new(handle: uintptr): &File {
        ret &File{
            handle: handle,
        }
    }
}

impl File {
    // Sets offset to next Read/Write operation and returns the new offset.
    // whence: 0 (Seek.Set) means, relative to the origin of the file, 1 (Seek.Cur)
    // means relative to the current offset, and 2 (Seek.End) means relative to end.
    // Return 0 if error occurs.
    //
    // Possible errors:
    //  InvalidDescriptor SyncIO Overflow Seek
    pub fn seek(mut self, offset: i64, origin: Seek): (i64, FsError) {
        let pos = sys::seek(int(self.handle), offset, int(origin))
        ret pos, FsError.Ok
    }

    // Closes file handle.
    //
    // Possible errors:
    //  InvalidDescriptor Signal IO
    pub fn close(mut self): FsError {
        if sys::close(int(self.handle)) == -1 {
            ret get_last_fs_error()
        }
        ret FsError.Ok
    }
}

// Reads bytes of file.
// First, learns byte-size of file.
// Then reads bytes and returns buffer.
//
// Possible errors:
//  Denied Exist Signal SyncIO IO IsDir Loop PerProcessLimit LongPath
//  SystemWideLimit NotExist UnableStream NoSpace NotDir Device Overflow
//  ReadOnly Retry Busy Device Seek InsufficientMemory Buffer
pub fn read_file(path: str): ([]byte, FsError) {
    let (s, mut err) = stat(path)
    if err != FsError.Ok {
        ret nil, err
    }

    if !s.is_reg() {
        ret nil, FsError.IsDir
    }

    if s.size == 0 {
        ret make([]byte, 0), FsError.Ok
    }

    let (mut f, err) = open_file(path, OFlag.Rdonly, 0)
    if err != FsError.Ok {
        ret nil, err
    }
    defer { f.close() }

    let mut buff = make([]byte, s.size)
    let (n, err) = f.read(buff)
    if err != FsError.Ok {
        ret nil, err
    }
    ret buff[:n], FsError.Ok
}

// Writes data to the named file, creating it if necessary.
// If the file does not exist, creates it with permissions perm (before umask);
// otherwise truncates it before writing, without changing permissions.
// Since requires multiple system calls to complete, a failure mid-operation
// can leave the file in a partially written state.
pub fn write_file(path: str, data: []byte, perm: int): FsError {
    let (mut f, mut err) = open_file(path, OFlag.Wronly|OFlag.Create|OFlag.Trunc, perm)
    if err != FsError.Ok {
        ret err
    }
    _, err = f.write(data)
    if err != FsError.Ok {
        ret err
    }
    ret f.close()
}

// Creates or truncates the named file. If the file already exists,
// it is truncated. If the file does not exist, it is created with mode 0666
// (before umask). If successful, methods on the returned File can
// be used for I/O; the associated file descriptor has mode OFlag.Rdwr.
pub fn create_file(path: str): (&File, FsError) {
    let (mut f, err) = open_file(path, OFlag.Rdwr|OFlag.Create|OFlag.Trunc, 0666)
    ret f, err
}
