// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::sys::{self, wchar_to_str, open_dir, close_dir}

// Reads the named directory and returs all its directory entries can read.
//
// Possible errors:
//  Denied InvalidDescriptor PerProcessLimit SystemWideLimit
//  NotExist InsufficientMemory NotDir
pub fn read_dir(path: str): ([]Dirent, FsError) {
	let mut stream = open_dir(path)
	if stream == nil {
		ret nil, get_fs_error_from_errno(get_last_errno())
	}
	let mut dirents: []Dirent = nil
	for {
		let dirent = unsafe { std::sys::read_dir(stream) }
		if dirent == nil {
			break
		}
		dirents = append[Dirent](dirents, Dirent{
			name: unsafe { wchar_to_str(dirent.d_name) },
		})
	}
	_ = unsafe { close_dir(stream) }
	ret dirents, FsError.Ok
}
