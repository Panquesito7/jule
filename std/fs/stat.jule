// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::sys::{self, get_last_errno, S_IFDIR, S_IFREG}

cpp type _mode_t: uint
cpp type _off_t: uint

cpp struct stat {
	st_mode: cpp._mode_t
	st_size: cpp._off_t
}

// Stat information.
pub struct Stat {
	// Type and mode.
	pub mode: uint

	// Total size in bytes of regular file or symbolic link.
	pub size: uint
}

impl Stat {
	// Reports path is directory or not.
	pub fn is_dir(self): bool { ret self.mode&S_IFDIR == S_IFDIR }

	// Reports path is regular file or not.
	pub fn is_reg(self): bool { ret self.mode&S_IFREG == S_IFREG }
}

// Returns a Stat describing the path.
//
// Possible errors: Denied IO Loop LongPath NotExist NotDir Overflow
pub fn stat(path: str): (s: Stat, err: FsError) {
	let handle = cpp.stat{}
	let ok = unsafe { std::sys::stat(path, &handle) }
	if ok {
		err = FsError.Ok
		s.mode = handle.st_mode
		s.size = handle.st_size
	} else {
		err = get_fs_error_from_errno(get_last_errno())
	}
	ret
}
