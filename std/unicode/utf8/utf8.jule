// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Package utf8 implements functions and constants to support text encoded in
// UTF-8. It includes functions to translate between runes and UTF-8 byte sequences.
// See https://en.wikipedia.org/wiki/UTF-8

// The conditions RUNE_ERROR==std::unicode::REPLACEMENT_CHAR and
// MAX_RUNE==std::unicode::MAX_RUNE are verified in the tests.
// Defining them locally avoids this package depending on package std::unicode.

// Numbers fundamental to the encoding.

//doc: The "error" rune or "Unicode replacement character"
pub const RUNE_ERROR: = '\uFFFD'

//doc: Characters below RUNE_SELF are represented as themselves in a single byte.
pub const RUNE_SELF: = 0x80

//doc: Maximum valid Unicode code point.
pub const MAX_RUNE: = '\U0010FFFF'

//doc: Maximum number of bytes of a UTF-8 encoded Unicode character.
pub const UTF_MAX: = 4

// Code points in the surrogate range are not valid for UTF-8.
const SURROGATE_MIN: = 0xD800
const SURROGATE_MAX: = 0xDFFF

const T1: = 0b00000000
const TX: = 0b10000000
const T2: = 0b11000000
const T3: = 0b11100000
const T4: = 0b11110000
const T5: = 0b11111000

const MASKX: = 0b00111111
const MASK2: = 0b00011111
const MASK3: = 0b00001111
const MASK4: = 0b00000111

const RUNE1_MAX: = 1<<7 - 1
const RUNE2_MAX: = 1<<11 - 1
const RUNE3_MAX: = 1<<16 - 1

// The default lowest and highest continuation byte.
const LOCB: = 0b10000000
const HICB: = 0b10111111

// These names of these constants are chosen to give nice alignment in the
// table below. The first nibble is an index into accept_ranges or F for
// special one-byte cases. The second nibble is the Rune length or the
// Status for the special one-byte case.
const XX: = 0xF1 // invalid: size 1
const AS: = 0xF0 // ASCII: size 1
const S1: = 0x02 // accept 0, size 2
const S2: = 0x13 // accept 1, size 3
const S3: = 0x03 // accept 0, size 3
const S4: = 0x23 // accept 2, size 3
const S5: = 0x34 // accept 3, size 4
const S6: = 0x04 // accept 0, size 4
const S7: = 0x44 // accept 4, size 4

// Is information about the first byte in a UTF-8 sequence.
first: = [256]byte{
	//   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x00-0x0F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x10-0x1F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x20-0x2F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x30-0x3F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x40-0x4F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x50-0x5F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x60-0x6F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x70-0x7F
	//   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
	XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, // 0x80-0x8F
	XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, // 0x90-0x9F
	XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, // 0xA0-0xAF
	XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, // 0xB0-0xBF
	XX, XX, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, // 0xC0-0xCF
	S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, // 0xD0-0xDF
	S2, S3, S3, S3, S3, S3, S3, S3, S3, S3, S3, S3, S3, S4, S3, S3, // 0xE0-0xEF
	S5, S6, S6, S6, S7, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, // 0xF0-0xFF
}

// Gives the range of valid values for the second byte in a UTF-8 sequence.
struct accept_range {
	lo: byte // lowest value for second byte.
	hi: byte // highest value for second byte.
}

// Has size 16 to avoid bounds checks in the code that uses it.
accept_ranges: = [16]accept_range{
	accept_range{LOCB, HICB},
	accept_range{0xA0, HICB},
	accept_range{LOCB, 0x9F},
	accept_range{0x90, HICB},
	accept_range{LOCB, 0x8F},
}

//doc:
// Reports whether the bytes in p begin with a full UTF-8 encoding of a rune.
// An invalid encoding is considered a full Rune since it will convert as a width-1 error rune.
pub full_rune(p []byte) bool {
	if p.empty() {
		ret false
	}
	x: = first[p[0]]
	if p.len >= int(x&7) {
		ret true // ASCII, invalid or valid.
	}
	// Must be short or invalid.
	accept: = accept_ranges[x>>4]
	if p.len > 1 && (p[1] < accept.lo || accept.hi < p[1]) {
		ret true
	} else if p.len > 2 && (p[2] < LOCB || HICB < p[2]) {
		ret true
	}
	ret false
}

//doc: Is like full_rune but its input is a string.
pub full_rune_str(s str) bool {
	if s.empty() {
		ret false
	}
	x: = first[s[0]]
	if s.len >= int(x&7) {
		ret true // ASCII, invalid, or valid.
	}
	// Must be short or invalid.
	accept: = accept_ranges[x>>4]
	if s.len > 1 && (s[1] < accept.lo || accept.hi < s[1]) {
		ret true
	} else if s.len > 2 && (s[2] < LOCB || HICB < s[2]) {
		ret true
	}
	ret false
}

//doc:
// Unpacks the first UTF-8 encoding in p and returns the rune and
// its width in bytes. If p is empty it returns (RUNE_ERROR, 0). Otherwise, if
// the encoding is invalid, it returns (RUNE_ERROR, 1). Both are impossible
// results for correct, non-empty UTF-8.
//
// An encoding is invalid if it is incorrect UTF-8, encodes a rune that is
// out of range, or is not the shortest possible UTF-8 encoding for the
// value. No other validation is performed.
pub decode_rune(p []byte) [r rune, size int] {
	if p.len < 1 {
		ret RUNE_ERROR, 0
	}
	p0: = p[0]
	x: = first[p0]
	if x >= AS {
		// The following code simulates an additional check for x == XX and
		// handling the ASCII and invalid cases accordingly. This mask-and-or
		// approach prevents an additional branch.
		mask: rune = x << 31 >> 31 // Create 0x0000 or 0xFFFF.
		ret rune(p[0])&^mask | RUNE_ERROR&mask, 1
	}
	sz: = int(x & 7)
	accept: = accept_ranges[x>>4]
	if p.len < sz {
		ret RUNE_ERROR, 1
	}
	b1: = p[1]
	if b1 < accept.lo || accept.hi < b1 {
		ret RUNE_ERROR, 1
	}
	if sz <= 2 { // <= instead of == to help the compiler eliminate some bounds checks
		ret rune(p0&MASK2)<<6 | rune(b1&MASKX), 2
	}
	b2: = p[2]
	if b2 < LOCB || HICB < b2 {
		ret RUNE_ERROR, 1
	}
	if sz <= 3 {
		ret rune(p0&MASK3)<<12 | rune(b1&MASKX)<<6 | rune(b2&MASKX), 3
	}
	b3: = p[3]
	if b3 < LOCB || HICB < b3 {
		ret RUNE_ERROR, 1
	}
	ret rune(p0&MASK4)<<18 | rune(b1&MASKX)<<12 | rune(b2&MASKX)<<6 | rune(b3&MASKX), 4
}

//doc:
// Is like decode_rune but its input is a string. If s is empty
// it returns (RUNE_ERROR, 0). Otherwise, if the encoding is invalid, it
// returns (RUNE_ERROR, 1). Both are impossible results for correct, non-empty
// UTF-8.
//
// An encoding is invalid if it is incorrect UTF-8, encodes a rune that is
// out of range, or is not the shortest possible UTF-8 encoding for the
// value. No other validation is performed.
pub decode_rune_str(s str) [r rune, size int] {
	if s.len < 1 {
		ret RUNE_ERROR, 0
	}
	s0: = s[0]
	x: = first[s0]
	if x >= AS {
		// The following code simulates an additional check for x == xx and
		// handling the ASCII and invalid cases accordingly. This mask-and-or
		// approach prevents an additional branch.
		mask: rune = x << 31 >> 31 // Create 0x0000 or 0xFFFF.
		ret rune(s[0])&^mask | RUNE_ERROR&mask, 1
	}
	sz: = int(x & 7)
	accept: = accept_ranges[x>>4]
	if s.len < sz {
		ret RUNE_ERROR, 1
	}
	s1: = s[1]
	if s1 < accept.lo || accept.hi < s1 {
		ret RUNE_ERROR, 1
	}
	if sz <= 2 { // <= instead of == to help the compiler eliminate some bounds checks
		ret rune(s0&MASK2)<<6 | rune(s1&MASKX), 2
	}
	s2: = s[2]
	if s2 < LOCB || HICB < s2 {
		ret RUNE_ERROR, 1
	}
	if sz <= 3 {
		ret rune(s0&MASK3)<<12 | rune(s1&MASKX)<<6 | rune(s2&MASKX), 3
	}
	s3: = s[3]
	if s3 < LOCB || HICB < s3 {
		ret RUNE_ERROR, 1
	}
	ret rune(s0&MASK4)<<18 | rune(s1&MASKX)<<12 | rune(s2&MASKX)<<6 | rune(s3&MASKX), 4
}

//doc:
// Unpacks the last UTF-8 encoding in p and returns the rune and
// its width in bytes. If p is empty it returns (RUNE_ERROR, 0). Otherwise, if
// the encoding is invalid, it returns (RUNE_ERROR, 1). Both are impossible
// results for correct, non-empty UTF-8.
//
// An encoding is invalid if it is incorrect UTF-8, encodes a rune that is
// out of range, or is not the shortest possible UTF-8 encoding for the
// value. No other validation is performed.
pub decode_last_rune(p []byte) [r rune, size int] {
	if p.empty() {
		ret RUNE_ERROR, 0
	}
	end: = p.len
	start: = end - 1
	r = rune(p[start])
	if r < RUNE_SELF {
		ret r, 1
	}
	// guard against O(n^2) behavior when traversing
	// backwards through strings with long sequences of
	// invalid UTF-8.
	lim: = end - UTF_MAX
	if lim < 0 {
		lim = 0
	}
	for start--; start >= lim; start-- {
		if rune_start(p[start]) {
			break
		}
	}
	if start < 0 {
		start = 0
	}
	r, size = decode_rune(p[start:end])
	if start+size != end {
		ret RUNE_ERROR, 1
	}
	ret r, size
}

//doc:
// Is like decode_last_rune but its input is a string. If
// s is empty it returns (RUNE_ERROR, 0). Otherwise, if the encoding is invalid,
// it returns (RUNE_ERROR, 1). Both are impossible results for correct,
// non-empty UTF-8.
//
// An encoding is invalid if it is incorrect UTF-8, encodes a rune that is
// out of range, or is not the shortest possible UTF-8 encoding for the
// value. No other validation is performed.
pub decode_last_rune_str(s str) [r rune, size int] {
	if s.empty() {
		ret RUNE_ERROR, 0
	}
	end: = s.len
	start: = end - 1
	r = rune(s[start])
	if r < RUNE_SELF {
		ret r, 1
	}
	// guard against O(n^2) behavior when traversing
	// backwards through strings with long sequences of
	// invalid UTF-8.
	lim := end - UTF_MAX
	if lim < 0 {
		lim = 0
	}
	for start--; start >= lim; start-- {
		if rune_start(s[start]) {
			break
		}
	}
	if start < 0 {
		start = 0
	}
	r, size = decode_rune_str(s[start:end])
	if start+size != end {
		ret RUNE_ERROR, 1
	}
	ret r, size
}

//doc:
// Returns the number of bytes required to encode the rune.
// It returns -1 if the rune is not a valid value to encode in UTF-8.
pub rune_len(r rune) int {
	match {
	case r < 0:
		ret -1
	case r <= RUNE1_MAX:
		ret 1
	case r <= RUNE2_MAX:
		ret 2
	case SURROGATE_MIN <= r && r <= SURROGATE_MAX:
		ret -1
	case r <= RUNE3_MAX:
		ret 3
	case r <= MAX_RUNE:
		ret 4
	}
	ret -1
}

//doc:
// Writes into p (which must be large enough) the UTF-8 encoding of the rune.
// If the rune is out of range, it writes the encoding of RUNE_ERROR.
// It returns the number of bytes written.
pub encode_rune(p []byte, r rune) int {
	// Negative values are erroneous. Making it unsigned addresses the problem.
	i: = u32(r)
	match {
	case i <= RUNE1_MAX:
		p[0] = byte(r)
		ret 1
	case i <= RUNE2_MAX:
		p[0] = T2 | byte(r>>6)
		p[1] = TX | byte(r)&MASKX
		ret 2
	case i > MAX_RUNE, SURROGATE_MIN <= i && i <= SURROGATE_MAX:
		r = RUNE_ERROR
		fallthrough
	case i <= RUNE3_MAX:
		p[0] = T3 | byte(r>>12)
		p[1] = TX | byte(r>>6)&MASKX
		p[2] = TX | byte(r)&MASKX
		ret 3
	}
	p[0] = T4 | byte(r>>18)
	p[1] = TX | byte(r>>12)&MASKX
	p[2] = TX | byte(r>>6)&MASKX
	p[3] = TX | byte(r)&MASKX
	ret 4
}

//doc:
// Appends the UTF-8 encoding of r to the end of p and
// returns the extended buffer. If the rune is out of range,
// it appends the encoding of RUNE_ERROR.
pub append_rune(p []byte, r rune) []byte {
	if u32(r) <= RUNE1_MAX {
		ret append[byte](p, byte(r))
	}
	ret append_rune_non_ascii(p, r)
}

append_rune_non_ascii(p []byte, r rune) []byte {
	// Negative values are erroneous. Making it unsigned addresses the problem.
	i: = u32(r)
	match {
	case i <= RUNE2_MAX:
		ret append[byte](p, T2|byte(r>>6), TX|byte(r)&MASKX)
	case i > MAX_RUNE, SURROGATE_MIN <= i && i <= SURROGATE_MAX:
		r = RUNE_ERROR
		fallthrough
	case i <= RUNE3_MAX:
		ret append[byte](p, T3|byte(r>>12), TX|byte(r>>6)&MASKX, TX|byte(r)&MASKX)
	}
	ret append[byte](p, T4|byte(r>>18), TX|byte(r>>12)&MASKX, TX|byte(r>>6)&MASKX, TX|byte(r)&MASKX)
}

//doc:
// Returns the number of runes in p. Erroneous and short
// encodings are treated as single runes of width 1 byte.
pub rune_count(p []byte) [n int] {
	for i: = 0; i < p.len; {
		n++
		c: = p[i]
		if c < RUNE_SELF {
			// ASCII fast path
			i++
			continue
		}
		x: = first[c]
		if x == XX {
			i++ // invalid.
			continue
		}
		size: = int(x & 7)
		if i+size > p.len {
			i++ // Short or invalid.
			continue
		}
		accept: = accept_ranges[x>>4]
		c = p[i+1]
		if c < accept.lo || accept.hi < c {
			size = 1
		} else if size == 2 {
		} else {
			c = p[i+2]
			if c < LOCB || HICB < c {
			size = 1
			} else if size == 3 {
			} else {
				c = p[i+3]
				if c < LOCB || HICB < c {
					size = 1
				}
			}
		}
		i += size
	}
	ret n
}

//doc: Is like rune_count but its input is a string.
pub rune_count_str(s str) [n int] {
	for i := 0; i < s.len; n++ {
		c: = s[i]
		if c < RUNE_SELF {
			// ASCII fast path
			i++
			continue
		}
		x: = first[c]
		if x == XX {
			i++ // invalid.
			continue
		}
		size: = int(x & 7)
		if i+size > s.len {
			i++ // Short or invalid.
			continue
		}
		accept := accept_ranges[x>>4]
		c = s[i+1]
		if c < accept.lo || accept.hi < c {
			size = 1
		} else if size == 2 {
		} else {
			c = s[i+2]
			if c < LOCB || HICB < c {
			size = 1
			} else if size == 3 {
			} else {
				c = s[i+3]
				if c < LOCB || HICB < c {
					size = 1
				}
			}
		}
		i += size
	}
	ret n
}

//doc:
// Reports whether the byte could be the first byte of an encoded,
// possibly invalid rune. Second and subsequent bytes always have the top two
// bits set to 10.
@inline
pub rune_start(b byte) bool { ret b&0xC0 != 0x80 }

//doc: Reports whether p consists entirely of valid UTF-8-encoded runes.
pub valid(p []byte) bool {
	// Fast path. Check for and skip 8 bytes of ASCII characters per iteration.
	for p.len >= 8 {
		// Combining two 32 bit loads allows the same code to be used
		// for 32 and 64 bit platforms.
		first32: = u32(p[0]) | u32(p[1])<<8 | u32(p[2])<<16 | u32(p[3])<<24
		second32: = u32(p[4]) | u32(p[5])<<8 | u32(p[6])<<16 | u32(p[7])<<24
		if (first32|second32)&0x80808080 != 0 {
			// Found a non ASCII byte (>= RUNE_SELF).
			break
		}
		p = p[8:]
	}
	for i: = 0; i < p.len; {
		pi: = p[i]
		if pi < RUNE_SELF {
			i++
			continue
		}
		x: = first[pi]
		if x == XX {
			ret false // Illegal starter byte.
		}
		size: = int(x & 7)
		if i+size > p.len {
			ret false // Short or invalid.
		}
		accept: = accept_ranges[x>>4]
		c: = p[i+1]
		if c < accept.lo || accept.hi < c {
			ret false
		} else if size == 2 {
		} else {
			c = p[i+2]
			if c < LOCB || HICB < c {
				ret false
			} else if size == 3 {
			} else {
				c = p[i+3]
				if c < LOCB || HICB < c {
					ret false
				}
			}
		}
		i += size
	}
	ret true
}

//doc: Reports whether s consists entirely of valid UTF-8-encoded runes.
pub valid_str(s str) bool {
	// Fast path. Check for and skip 8 bytes of ASCII characters per iteration.
	for s.len >= 8 {
		// Combining two 32 bit loads allows the same code to be used
		// for 32 and 64 bit platforms.
		first32: = u32(s[0]) | u32(s[1])<<8 | u32(s[2])<<16 | u32(s[3])<<24
		second32: = u32(s[4]) | u32(s[5])<<8 | u32(s[6])<<16 | u32(s[7])<<24
		if (first32|second32)&0x80808080 != 0 {
			// Found a non ASCII byte (>= RuneSelf).
			break
		}
		s = s[8:]
	}
	for i: = 0; i < s.len; {
		si: = s[i]
		if si < RUNE_SELF {
			i++
			continue
		}
		x: = first[si]
		if x == XX {
			ret false // Illegal starter byte.
		}
		size: = int(x & 7)
		if i+size > s.len {
			ret false // Short or invalid.
		}
		accept: = accept_ranges[x>>4]
		c: = s[i+1]
		if c < accept.lo || accept.hi < c {
			ret false
		} else if size == 2 {
		} else {
			c = s[i+2]
			if c < LOCB || HICB < c {
				ret false
			} else if size == 3 {
			} else {
				c = s[i+3]
				if c < LOCB || HICB < c {
					ret false
				}
			}
		}
		i += size
	}
	ret true
}

//doc:
// Reports whether r can be legally encoded as UTF-8.
// Code points that are out of range or a surrogate half are illegal.
pub valid_rune(r rune) bool {
	match {
	case 0 <= r && r < SURROGATE_MIN:
		ret true
	case SURROGATE_MAX < r && r <= MAX_RUNE:
		ret true
	}
	ret false
}
