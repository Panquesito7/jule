// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/go1.19/src/unicode/letter.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
// 
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

// Maximum valid Unicode code point.
pub const MAX_RUNE = '\U0010FFFF'

// Represents invalid code points.
pub const REPLACEMENT_CHAR = '\uFFFD'

// Maximum ASCII value.
pub const MAX_ASCII = '\u007F'

// Maximum Latin-1 value.
pub const MAX_LATIN1 = '\u00FF'

// Indices into the delta arrays inside CaseRanges for case mapping.
pub const UPPER_CASE = 0
pub const LOWER_CASE = 1
pub const TITLE_CASE = 2
pub const MAX_CASE = 3

// If the Delta field of a CaseRange is UpperLower, it means
// this CaseRange represents a sequence of the form (say)
// Upper Lower Upper Lower.
const UPPER_LOWER = MAX_RUNE + 1 // (Cannot be a valid delta.)

type D: [MAX_CASE]rune // to make the CaseRanges text shorter

// CASE_ORBIT is defined in tables.jule as []FoldPair. Right now all the
// entries fit in uint16, so use uint16. If that changes, compilation
// will fail (the constants in the composite literal will not fit in u16)
// and the types here can change to u32.
struct FoldPair {
    from: u16
    to:   u16
}

// Represents a range of Unicode code points for simple (one
// code point to one code point) case conversion.
// The range runs from lo to hi inclusive, with a fixed stride of 1. Deltas
// are the number to add to the code point to reach the code point for a
// different case for that character. They may be negative. If zero, it
// means the character is in the corresponding case. There is a special
// case representing sequences of alternating corresponding Upper and Lower
// pairs. It appears with a fixed delta of
//
//  {UPPER_LOWER, UPPER_LOWER, UPPER_LOWER}
//
// The constant UPPER_LOWER has an otherwise impossible delta value.
struct CaseRange {
    lo:    u32
    hi:    u32
    delta: D
}

// Represents of a range of 16-bit Unicode code points. The range runs from lo to hi
// inclusive and has the specified stride.
pub struct Range16 {
    pub lo:     u16
    pub hi:     u16
    pub stride: u16
}

// Represents of a range of Unicode code points and is used when one or
// more of the values will not fit in 16 bits. The range runs from lo to hi
// inclusive and has the specified stride. lo and hi must always be >= 1<<16.
pub struct Range32 {
    pub lo:     u32
    pub hi:     u32
    pub stride: u32
}

// Defines a set of Unicode code points by listing the ranges of
// code points within the set. The ranges are listed in two slices
// to save space: a slice of 16-bit ranges and a slice of 32-bit ranges.
// The two slices must be in sorted order and non-overlapping.
// Also, r32 should contain only values >= 0x10000 (1<<16).
pub struct RangeTable {
    pub r16:          []Range16
    pub r32:          []Range32
    pub latin_offset: int // number of entries in r16 with HI <= MAX_LATIN1
}

// to maps the rune using the specified case mapping.
// It additionally reports whether case_range contained a mapping for r.
fn __to(case: int, r: rune, case_range: []CaseRange): (mapped_rune: rune, found_mapping: bool) {
    if case < 0 || MAX_CASE <= case {
        ret REPLACEMENT_CHAR, false // as reasonable an error as any
    }

    // binary search over ranges
    let mut lo = 0
    let mut hi = case_range.len
    for lo < hi {
        let m = lo + (hi-lo)/2
        let cr = case_range[m]
        if rune(cr.lo) <= r && r <= rune(cr.hi) {
            let delta = cr.delta[case]
            if delta > MAX_RUNE {
                // In an Upper-Lower sequence, which always starts with
                // an UpperCase letter, the real deltas always look like:
                //  {0, 1, 0}    UpperCase (Lower is next)
                //  {-1, 0, -1}  LowerCase (Upper, Title are previous)
                // The characters at even offsets from the beginning of the
                // sequence are upper case; the ones at odd offsets are lower.
                // The correct mapping can be done by clearing or setting the low
                // bit in the sequence offset.
                // The constants UpperCase and TitleCase are even while LowerCase
                // is odd so we take the low bit from case.
                ret rune(cr.lo) + ((r-rune(cr.lo))&^1 | rune(case&1)), true
            }
            ret r + delta, true
        }
        if r < rune(cr.lo) {
            hi = m
        } else {
            lo = m + 1
        }
    }
    ret r, false
}

// Maps the rune to the specified case: UpperCase, LowerCase, or TitleCase.
pub fn to(case: int, mut r: rune): rune {
    r, _ = __to(case, r, CASE_RANGES)
    ret r
}

// Maps the rune to upper case.
pub fn to_upper(mut r: rune): rune {
    if r <= MAX_ASCII {
        if 'a' <= r && r <= 'z' {
            r -= 'a' - 'A'
        }
        ret r
    }
    ret to(UPPER_CASE, r)
}

// Maps the rune to lower case.
pub fn to_lower(mut r: rune): rune {
    if r <= MAX_ASCII {
        if 'A' <= r && r <= 'Z' {
            r += 'a' - 'A'
        }
        ret r
    }
    ret to(LOWER_CASE, r)
}
