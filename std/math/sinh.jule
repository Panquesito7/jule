// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

/*
  Floating-point hyperbolic sine and cosine.

  The exponential func is called for arguments
  greater in magnitude than 0.5.

  A series is used for arguments smaller in magnitude than 0.5.

   cosh(x) is computed from the exponential func for
   all arguments.
*/

//doc:
// Returns the hyperbolic sine of x.
//
// Special cases are:
//  sinh(±0) = ±0
//  sinh(±inf) = ±inf
//  sinh(nan) = nan
pub sinh(x: f64) f64 {
	// The coefficients are #2029 from Hart & Cheney. (20.36D)
	const P0: = -0.6307673640497716991184787251e+6
	const P1: = -0.8991272022039509355398013511e+5
	const P2: = -0.2894211355989563807284660366e+4
	const P3: = -0.2630563213397497062819489e+2
	const Q0: = -0.6307673640497716991212077277e+6
	const Q1: = 0.1521517378790019070696485176e+5
	const Q2: = -0.173678953558233699533450911e+3

	sign: = false
	if x < 0 {
		x = -x
		sign = true
	}

	temp: f64
	match {
	case x > 21:
		temp = exp(x) * 0.5
	case x > 0.5:
		ex: = exp(x)
		temp = (ex - 1/ex) * 0.5
	default:
		sq: = x * x
		temp = (((P3*sq+P2)*sq+P1)*sq + P0) * x
		temp = temp / (((sq+Q2)*sq+Q1)*sq + Q0)
	}

	if sign {
		temp = -temp
	}
	ret temp
}

//doc:
// Returns the hyperbolic cosine of x.
//
// Special cases are:
//  cosh(±0) = 1
//  cosh(±inf) = +inf
//  cosh(nan) = nan
pub cosh(x: f64) f64 {
	x = abs(x)
	if x > 21 {
		ret exp(x) * 0.5
	}
	ex: = exp(x)
	ret (ex + 1/ex) * 0.5
}
