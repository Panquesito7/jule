// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::math::bits

fn zero(x: u64) u64 {
	if x == 0 {
		ret 1
	}
	ret 0
	// branchless:
	// ret ((x>>1 | x&1) - 1) >> 63
}

fn nonzero(x: u64) u64 {
	if x != 0 {
		ret 1
	}
	ret 0
	// branchless:
	// ret 1 - ((x>>1|x&1)-1)>>63
}

fn shl(u1: u64, u2: u64, n: uint) (r1: u64, r2: u64) {
	r1 = u1<<n | u2>>(64-n) | u2<<(n-64)
	r2 = u2 << n
	ret
}

fn shr(u1: u64, u2: u64, n: uint) (r1: u64, r2: u64) {
	// Compute shift for correct FMA computing.
	// Actually: r2 = u2>>n | u1<<(64-n) | u1>>(n-64)
	// But u1>>(n-64) is bad computation, but why: ?
	// For this reason, compute this shifting manually.
	//
	// TODO: Make sure this computation is fast and efficiency?
	mut let shift = u1
	mut let shift_n = n-64
	for shift > 0 && shift_n > 0 {
		shift_n--
		shift >>= 1
	}

	r2 = u2>>n | u1<<(64-n) | shift
	r1 = u1 >> n
	ret
}

// Compresses the bottom n+1 bits of the two-word
// value into a single bit. the result is equal to the value
// shifted to the right by n, except the result's 0th bit is
// set to the bitwise OR of the bottom n+1 bits.
fn shrcompress(u1: u64, u2: u64, n: uint) (r1: f64, r2: u64) {
	match {
	case n == 0:
		ret u1, u2
	case n == 64:
		ret 0, u1 | nonzero(u2)
	case n >= 128:
		ret 0, nonzero(u1 | u2)
	case n < 64:
		r1, r2 = shr(u1, u2, n)
		r2 |= nonzero(u2 & (1<<n - 1))
	case n < 128:
		r1, r2 = shr(u1, u2, n)
		r2 |= nonzero(u1&(1<<(n-64)-1) | u2)
	}
	ret
}

fn lz(u1: u64, u2: u64) (l: i32) {
	l = i32(std::math::bits::leading_zeros64(u1))
	if l == 64 {
		l += i32(std::math::bits::leading_zeros64(u2))
	}
	ret l
}

// Splits b into sign, biased exponent, and mantissa.
// It adds the implicit 1 bit to the mantissa for normal values,
// and normalizes subnormal values.
fn split(b: u64) (sign: u32, exp: i32, mantissa: u64) {
	sign = u32(b >> 63)
	exp = i32(b>>52) & MASK
	mantissa = b & FRAC_MASK

	if exp == 0 {
		// Normalize value if subnormal.
		let shift = uint(std::math::bits::leading_zeros64(mantissa) - 11)
		mantissa <<= shift
		exp = 1 - i32(shift)
	} else {
		// Add implicit 1 bit
		mantissa |= 1 << 52
	}
	ret
}

// Returns x * y + z, computed with only one rounding.
// (That is, fma returns the fused multiply-add of x, y, and z.)
pub fn fma(x: f64, y: f64, z: f64) f64 {
	let (bx, by, bz) = f64_bits(x), f64_bits(y), f64_bits(z)

	// inf or nan or zero involved. At most one rounding will occur.
	if x == 0.0 || y == 0.0 || z == 0.0 || bx&UVINF == UVINF || by&UVINF == UVINF {
		ret x*y + z
	}
	// Handle non-finite z separately. Evaluating x*y+z where
	// x and y are finite, but z is infinite, should always result in z.
	if bz&UVINF == UVINF {
		ret z
	}

	// Inputs are (sub)normal.
	// Split x, y, z into sign, exponent, mantissa.
	let (xs, xe, xm) = split(bx)
	let (ys, ye, ym) = split(by)
	let (mut zs, mut ze, zm) = split(bz)

	// Compute product p = x*y as sign, exponent, two-word mantissa.
	// Start with exponent. "is normal" bit isn't subtracted yet.
	mut let pe = xe + ye - BIAS + 1

	// pm1:pm2 is the double-word mantissa for the product p.
	// Shift left to leave top bit in product. Effectively
	// shifts the 106-bit product to the left by 21.
	let (mut pm1, mut pm2) = std::math::bits::mul64(xm<<10, ym<<11)
	let (mut zm1, mut zm2) = zm<<10, u64(0)
	mut let ps = xs ^ ys // product sign

	// normalize to 62nd bit
	let is62zero = uint((^pm1 >> 62) & 1)
	pm1, pm2 = shl(pm1, pm2, is62zero)
	pe -= i32(is62zero)

	// Swap addition operands so |p| >= |z|
	if pe < ze || pe == ze && pm1 < zm1 {
		ps, pe, pm1, pm2, zs, ze, zm1, zm2 = zs, ze, zm1, zm2, ps, i32(pe), pm1, pm2
	}

	// Align significands
	zm1, zm2 = shrcompress(zm1, zm2, uint(pe-ze))

	// Compute resulting significands, normalizing if necessary.
	mut let m: u64
	mut let c: u64
	if ps == zs {
		// Adding (pm1:pm2) + (zm1:zm2)
		pm2, c = std::math::bits::add64(pm2, zm2, 0)
		pm1, _ = std::math::bits::add64(pm1, zm1, c)
		pe -= i32(^pm1 >> 63)
		pm1, m = shrcompress(pm1, pm2, uint(64+pm1>>63))
	} else {
		// Subtracting (pm1:pm2) - (zm1:zm2)
		pm2, c = std::math::bits::sub64(pm2, zm2, 0)
		pm1, _ = std::math::bits::sub64(pm1, zm1, c)
		let nz = lz(pm1, pm2)
		pe -= nz
		m, pm2 = shl(pm1, pm2, uint(nz-1))
		m |= nonzero(pm2)
	}

	// Round and break ties to even
	if pe > 1022+BIAS || pe == 1022+BIAS && (m+1<<9)>>63 == 1 {
		// rounded value overflows exponent range
		ret f64_from_bits(u64(ps)<<63 | UVINF)
	}
	if pe < 0 {
		let n = uint(-pe)
		m = m>>n | nonzero(m&(1<<n-1))
		pe = 0
	}
	m = ((m + 1<<9) >> 10) & ^zero((m&(1<<10-1))^1<<9)
	pe &= -i32(nonzero(m))
	ret f64_from_bits(u64(ps)<<63 + u64(pe)<<52 + m)
}
