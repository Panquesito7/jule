// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Returns the next representable f32 value after x towards y.
//
// Special cases are:
//  nextafter32(x, x)   = x
//  nextafter32(nan, y) = nan
//  nextafter32(x, nan) = nan
pub fn nextafter32(x: f32, y: f32) (r: f32) {
	match {
	case is_nan(f64(x)) || is_nan(f64(y)): // special case
		r = f32(nan())
	case x == y:
		r = x
	case x == 0:
		r = f32(copysign(f64(f32_from_bits(1)), f64(y)))
	case (y > x) == (x > 0):
		r = f32_from_bits(f32_bits(x) + 1)
	default:
		r = f32_from_bits(f32_bits(x) - 1)
	}
	ret
}

// Returns the next representable f64 value after x towards y.
//
// Special cases are:
//  nextafter(x, x)   = x
//  nextafter(nan, y) = nan
//  nextafter(x, nan) = nan
pub fn nextafter(x: f64, y: f64) (r: f64) {
	match {
	case is_nan(x) || is_nan(y): // special case
		r = nan()
	case x == y:
		r = x
	case x == 0:
		r = copysign(f64_from_bits(1), y)
	case (y > x) == (x > 0):
		r = f64_from_bits(f64_bits(x) + 1)
	default:
		r = f64_from_bits(f64_bits(x) - 1)
	}
	ret
}
