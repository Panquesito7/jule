// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

const UVNAN     = 0x7FF8000000000001
const UVINF     = 0x7FF0000000000000
const UVNEGINF  = 0xFFF0000000000000
const UVONE     = 0x3FF0000000000000
const MASK      = 0x7FF
const SHIFT     = 64 - 11 - 1
const BIAS      = 1023
const SIGN_MASK = 1 << 63
const FRAC_MASK = 1<<SHIFT - 1

// Returns an IEEE 754 “not-a-number” value.
pub fn nan() f64 { ret f64_from_bits(UVNAN) }

// Reports whether f is an IEEE 754 “not-a-number” value.
pub fn is_nan(f: f64) bool {
	// IEEE 754 says that only NaNs satisfy f != f.
	// To avoid the floating-point hardware, could use:
	//  x: = f64_bits(f);
	//  ret u32(x>>SHIFT)&MASK == MASK && x != UVINF && x != UVNEGINF
	ret f != f
}

// Returns positive infinity if sign >= 0, negative infinity if !sign < 0.
pub fn inf(sign: int) f64 {
	if sign >= 0 {
		ret f64_from_bits(UVINF)
	}
	ret f64_from_bits(UVNEGINF)
}

// Reports whether f is an infinity, according to sign.
// If sign > 0, i_sinf reports whether f is positive infinity.
// If sign < 0, is_inf reports whether f is negative infinity.
// If sign == 0, is_inf reports whether f is either infinity.
pub fn is_inf(f: f64, sign: int) bool {
	// Test for infinity by comparing against maximum float.
	// To avoid the floating-point hardware, could use:
	//  x: = f64_bits(f);
	//  ret sign >= 0 && x == UVINF || sign <= 0 && x == UVNEGINF;
	ret sign >= 0 && f > f64.max || sign <= 0 && f < -f64.max
}

// Returns a normal number y and exponent exp
// satisfying x == y × 2**exp. It assumes x is finite and non-zero.
fn normalize(x: f64) (y: f64, exp: int) {
	const SMALLEST_NORMAL = 2.2250738585072014e-308 // 2**-1022
	if abs(x) < SMALLEST_NORMAL {
		ret x * (1 << 52), -52
	}
	ret x, 0
}
