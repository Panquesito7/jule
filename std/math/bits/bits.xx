// Copyright 2022 The X Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Package bits implements bit counting and manipulation
// functions for the predeclared unsigned integer types.

// --- leading_zeros ---

//doc: Returns the number of leading zero bits in x; the result is 8 for x == 0.
@inline
pub leading_zeros8(x u8) int { ret 8 - len8(x) }

//doc: Returns the number of leading zero bits in x; the result is 16 for x == 0.
@inline
pub leading_zeros16(x u16) int { ret 16 - len16(x) }

//doc: Returns the number of leading zero bits in x; the result is 32 for x == 0.
@inline
pub leading_zeros32(x u32) int { ret 32 - len32(x) }

//doc: Returns the number of leading zero bits in x; the result is 64 for x == 0.
@inline
pub leading_zeros64(x u64) int { ret 64 - len64(x) }

// --- trailing_zeros ---

// See http://supertech.csail.mit.edu/papers/debruijn.pdf
const deBruijn32: = 0x077CB531

deBruijn32tab: = [32]byte{
	0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8,
	31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9,
}

const deBruijn64: = 0x03f79d71b4ca8b09

deBruijn64tab: = [64]byte{
	0, 1, 56, 2, 57, 49, 28, 3, 61, 58, 42, 50, 38, 29, 17, 4,
	62, 47, 59, 36, 45, 43, 51, 22, 53, 39, 33, 30, 24, 18, 12, 5,
	63, 55, 48, 27, 60, 41, 37, 16, 46, 35, 44, 21, 52, 32, 23, 11,
	54, 26, 40, 15, 34, 20, 31, 10, 25, 14, 19, 9, 13, 8, 7, 6,
}

//doc: Returns the number of trailing zero bits in x; the result is 8 for x == 0.
@inline
pub trailing_zeros8(x u8) int {
	ret int(ntz8tab[x])
}

//doc: Returns the number of trailing zero bits in x; the result is 16 for x == 0.
pub trailing_zeros16(x u16) int {
	if x == 0 {
		ret 16
	}
	// see comment in trailing_zeros64
	ret int(deBruijn32tab[u32(x&-x)*deBruijn32>>(32-5)])
}

//doc: Returns the number of trailing zero bits in x; the result is 32 for x == 0.
pub trailing_zeros32(x u32) int {
	if x == 0 {
		ret 32
	}
	// see comment in trailing_zeros64
	ret int(deBruijn32tab[(x&-x)*deBruijn32>>(32-5)])
}

//doc: Returns the number of trailing zero bits in x; the result is 64 for x == 0.
pub trailing_zeros64(x u64) int {
	if x == 0 {
		ret 64
	}
	// If popcount is fast, replace code below with return popcount(^x & (x - 1)).
	//
	// x & -x leaves only the right-most bit set in the word. Let k be the
	// index of that bit. Since only a single bit is set, the value is two
	// to the power of k. Multiplying by a power of two is equivalent to
	// left shifting, in this case by k bits. The de Bruijn (64 bit) constant
	// is such that all six bit, consecutive substrings are distinct.
	// Therefore, if we have a left shifted version of this constant we can
	// find by how many bits it was shifted by looking at which six bit
	// substring ended up at the top of the word.
	// (Knuth, volume 4, section 7.3.1)
	ret int(deBruijn64tab[(x&-x)*deBruijn64>>(64-6)])
}

// --- ones_count ---

const m0: = 0x5555555555555555 // 01010101 ...
const m1: = 0x3333333333333333 // 00110011 ...
const m2: = 0x0f0f0f0f0f0f0f0f // 00001111 ...
const m3: = 0x00ff00ff00ff00ff // etc.
const m4: = 0x0000ffff0000ffff

//doc: Returns the number of one bits ("population count") in x.
@inline
pub ones_count8(x u8) int {
	ret int(pop8tab[x])
}

//doc: Returns the number of one bits ("population count") in x.
@inline
pub ones_count16(x u16) int {
	ret int(pop8tab[x>>8] + pop8tab[x&0xff])
}

//doc: Returns the number of one bits ("population count") in x.
@inline
pub ones_count32(x u32) int {
	ret int(pop8tab[x>>24] + pop8tab[x>>16&0xff] + pop8tab[x>>8&0xff] + pop8tab[x&0xff])
}

//doc: Returns the number of one bits ("population count") in x.
pub ones_count64(x u64) int {
	// Implementation: Parallel summing of adjacent bits.
	// See "Hacker's Delight", Chap. 5: Counting Bits.
	// The following pattern shows the general approach:
	//
	//   x = x>>1&(m0&m) + x&(m0&m)
	//   x = x>>2&(m1&m) + x&(m1&m)
	//   x = x>>4&(m2&m) + x&(m2&m)
	//   x = x>>8&(m3&m) + x&(m3&m)
	//   x = x>>16&(m4&m) + x&(m4&m)
	//   x = x>>32&(m5&m) + x&(m5&m)
	//   ret int(x)
	//
	// Masking (& operations) can be left away when there's no
	// danger that a field's sum will carry over into the next
	// field: Since the result cannot be > 64, 8 bits is enough
	// and we can ignore the masks for the shifts by 8 and up.
	// Per "Hacker's Delight", the first line can be simplified
	// more, but it saves at best one instruction, so we leave
	// it alone for clarity.
	const m: = 1<<64 - 1
	x = x>>1&(m0&m) + x&(m0&m)
	x = x>>2&(m1&m) + x&(m1&m)
	x = (x>>4 + x) & (m2 & m)
	x += x >> 8
	x += x >> 16
	x += x >> 32
	ret int(x) & (1<<7 - 1)
}

// --- rotate_left ---

//doc:
// Returns the value of x rotated left by (k mod 8) bits.
// To rotate x right by k bits, call rotate_left8(x, -k).
//
// This function's execution time does not depend on the inputs.
pub rotate_left8(x u8, k int) u8 {
	const n: = 8
	s: = uint(k) & (n - 1)
	ret x<<s | x>>(n-s)
}

//doc:
// Returns the value of x rotated left by (k mod 16) bits.
// To rotate x right by k bits, call rotate_left16(x, -k).
//
// This function's execution time does not depend on the inputs.
pub rotate_left16(x u16, k int) u16 {
	const n: = 16
	s: = uint(k) & (n - 1)
	ret x<<s | x>>(n-s)
}

//doc:
// Returns the value of x rotated left by (k mod 32) bits.
// To rotate x right by k bits, call rotate_left32(x, -k).
//
// This function's execution time does not depend on the inputs.
pub rotate_left32(x u32, k int) u32 {
	const n: = 32
	s: = uint(k) & (n - 1)
	ret x<<s | x>>(n-s)
}

//doc:
// Returns the value of x rotated left by (k mod 64) bits.
// To rotate x right by k bits, call rotate_left64(x, -k).
//
// This function's execution time does not depend on the inputs.
pub rotate_left64(x u64, k int) u64 {
	const n: = 64
	s: = uint(k) & (n - 1)
	ret x<<s | x>>(n-s)
}

// --- reverse ---

//doc: Returns the value of x with its bits in reversed order.
@inline
pub reverse8(x u8) u8 {
	ret rev8tab[x]
}

//doc: Returns the value of x with its bits in reversed order.
@inline
pub reverse16(x u16) u16 {
	ret u16(rev8tab[x>>8]) | u16(rev8tab[x&0xff])<<8
}

//doc: Returns the value of x with its bits in reversed order.
pub reverse32(x u32) u32 {
	const m: = 1<<32 - 1
	x = x>>1&(m0&m) | x&(m0&m)<<1
	x = x>>2&(m1&m) | x&(m1&m)<<2
	x = x>>4&(m2&m) | x&(m2&m)<<4
	ret reverse_bytes32(x)
}

//doc: Returns the value of x with its bits in reversed order.
pub reverse64(x u64) u64 {
	const m: = 1<<64 - 1
	x = x>>1&(m0&m) | x&(m0&m)<<1
	x = x>>2&(m1&m) | x&(m1&m)<<2
	x = x>>4&(m2&m) | x&(m2&m)<<4
	ret reverse_bytes64(x)
}

// --- reverse_bytes ---

//doc:
// Returns the value of x with its bytes in reversed order.
//
// This function's execution time does not depend on the inputs.
@inline
pub reverse_bytes16(x u16) u16 {
	ret x>>8 | x<<8
}

//doc:
// Returns the value of x with its bytes in reversed order.
//
// This function's execution time does not depend on the inputs.
pub reverse_bytes32(x u32) u32 {
	const m: = 1<<32 - 1
	x = x>>8&(m3&m) | x&(m3&m)<<8
	ret x>>16 | x<<16
}

//doc:
// Returns the value of x with its bytes in reversed order.
//
// This function's execution time does not depend on the inputs.
pub reverse_bytes64(x u64) u64 {
	const m: = 1<<64 - 1
	x = x>>8&(m3&m) | x&(m3&m)<<8
	x = x>>16&(m4&m) | x&(m4&m)<<16
	ret x>>32 | x<<32
}

// --- len ---

//doc:
// Returns the minimum number of bits required to represent x;
// the result is 0 for x == 0.
@inline
pub len8(x u8) int {
	ret int(len8tab[x])
}

//doc:
// Returns the minimum number of bits required to represent x;
// the result is 0 for x == 0.
pub len16(x u16) [n int] {
	if x >= 1<<8 {
		x >>= 8
		n = 8
	}
	ret n + int(len8tab[x])
}

//doc:
// Returns the minimum number of bits required to represent x;
// the result is 0 for x == 0.
pub len32(x u32) [n int] {
	if x >= 1<<16 {
		x >>= 16
		n = 16
	}
	if x >= 1<<8 {
		x >>= 8
		n += 8
	}
	ret n + int(len8tab[x])
}

//doc:
// Returns the minimum number of bits required to represent x;
// the result is 0 for x == 0.
pub len64(x u64) [n int] {
	if x >= 1<<32 {
		x >>= 32
		n = 32
	}
	if x >= 1<<16 {
		x >>= 16
		n += 16
	}
	if x >= 1<<8 {
		x >>= 8
		n += 8
	}
	ret n + int(len8tab[x])
}

// --- Add with carry ---

//doc:
// Returns the sum with carry of x, y and carry: sum = x + y + carry.
// The carry input must be 0 or 1; otherwise the behavior is undefined.
// The carryout output is guaranteed to be 0 or 1.
//
// This function's execution time does not depend on the inputs.
pub add32(x, y, carry u32) [sum, carryout u32] {
	sum64: = u64(x) + u64(y) + u64(carry)
	sum = u32(sum64)
	carryout = u32(sum64 >> 32)
	ret
}

//doc:
// Returns the sum with carry of x, y and carry: sum = x + y + carry.
// The carry input must be 0 or 1; otherwise the behavior is undefined.
// The carryout output is guaranteed to be 0 or 1.
//
// This function's execution time does not depend on the inputs.
pub add64(x, y, carry u64) [sum, carryout u64] {
	sum = x + y + carry
	// The sum will overflow if both top bits are set (x & y) or if one of them
	// is (x | y), and a carry from the lower place happened. If such a carry
	// happens, the top bit will be 1 + 0 + 1 = 0 (& ~sum).
	carryout = ((x & y) | ((x | y) & ~sum)) >> 63
	ret
}

// --- Full-width multiply ---

//doc:
// Returns the 64-bit product of x and y: (hi, lo) = x * y
// with the product bits' upper half returned in hi and the lower
// half returned in lo.
//
// This function's execution time does not depend on the inputs.
pub mul32(x, y u32) [hi, lo u32] {
	tmp: = u64(x) * u64(y)
	hi, lo = u32(tmp>>32), u32(tmp)
	ret
}

//doc:
// Returns the 128-bit product of x and y: (hi, lo) = x * y
// with the product bits' upper half returned in hi and the lower
// half returned in lo.
//
// This function's execution time does not depend on the inputs.
pub mul64(x, y u64) [hi, lo u64] {
	const mask32: = 1<<32 - 1
	x0: = x & mask32
	x1: = x >> 32
	y0: = y & mask32
	y1: = y >> 32
	w0: = x0 * y0
	t: = x1*y0 + w0>>32
	w1: = t & mask32
	w2: = t >> 32
	w1 += x0 * y1
	hi = x1*y1 + w2 + w1>>32
	lo = x * y
	ret
}
