// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The original C code and the comment below are from
// FreeBSD's /usr/src/lib/msun/src/e_remainder.c and came
// with this notice. The X code is a simplified version of
// the original C.
//
// ====================================================
// Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
//
// Developed at SunPro, a Sun Microsystems, Inc. business.
// Permission to use, copy, modify, and distribute this
// software is freely granted, provided that this notice
// is preserved.
// ====================================================
//
// __ieee754_remainder(x,y)
// Return :
//      returns  x REM y  =  x - [x/y]*y  as if in infinite
//      precision arithmetic, where [x/y] is the (infinite bit)
//      integer nearest x/y (in half way cases, choose the even one).
// Method :
//      Based on Mod() returning  x - [x/y]chopped * y  exactly.

//doc:
// Returns the IEEE 754 floating-point remainder of x/y.
//
// Special cases are:
//  remainder(±inf, y) = nan
//  remainder(nan, y) = nan
//  remainder(x, 0) = nan
//  remainder(x, ±inf) = x
//  remainder(x, nan) = nan
pub remainder(x, y f64) f64 {
	const TINY    : = 4.45014771701440276618e-308 // 0x0020000000000000
	const HALF_MAX: = f64.max / 2

	// special cases
	match {
	case isnan(x) || isnan(y) || isinf(x, 0) || y == 0:
		ret nan()
	case isinf(y, 0):
		ret x
	}
	sign: = false
	if x < 0 {
		x = -x
		sign = true
	}
	if y < 0 {
		y = -y
	}
	if x == y {
		if sign {
			zero: = 0.0
			ret -zero
		}
		ret 0
	}
	if y <= HALF_MAX {
		x = mod(x, y+y) // now x < 2y
	}
	if y < TINY {
		if x+x > y {
			x -= y
			if x+x >= y {
				x -= y
			}
		}
	} else {
		y_half: = 0.5 * y
		if x > y_half {
			x -= y
			if x >= y_half {
				x -= y
			}
		}
	}
	if sign {
		x = -x
	}
	ret x
}
