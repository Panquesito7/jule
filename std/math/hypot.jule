// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

/*
  hypot -- sqrt(p*p + q*q), but overflows only if the result does.
*/

//doc:
// Returns sqrt(p*p + q*q), taking care to avoid
// unnecessary overflow and underflow.
//
// Special cases are:
//  hypot(±inf, q) = +inf
//  hypot(p, ±inf) = +inf
//  hypot(nan, q) = nan
//  hypot(p, nan) = nan
pub fn hypot(p: f64, q: f64) f64 {
	// special cases
	match {
	case isinf(p, 0) || isinf(q, 0):
		ret inf(1)
	case isnan(p) || isnan(q):
		ret nan()
	}
	p, q = abs(p), abs(q)
	if p < q {
		p, q = q, p
	}
	if p == 0 {
		ret 0
	}
	q = q / p
	ret p * sqrt(1+q*q)
}
