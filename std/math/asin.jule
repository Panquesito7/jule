// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

/*
  Floating-point arcsine and arccosine.

  They are implemented by computing the arctangent
  after appropriate range reduction.
*/

//doc:
// Returns the arcsine, in radians, of x.
//
// Special cases are:
//  asin(±0) = ±0
//  asin(x) = nan if x < -1 or x > 1
pub fn asin(x: f64) f64 {
	if x == 0 {
		ret x // special case
	}
	let sign = false
	if x < 0 {
		x = -x
		sign = true
	}
	if x > 1 {
		ret nan() // special case
	}

	let temp = sqrt(1 - x*x)
	if x > 0.7 {
		temp = PI/2 - satan(temp/x)
	} else {
		temp = satan(x / temp)
	}

	if sign {
		temp = -temp
	}
	ret temp
}

//doc:
// Returns the arccosine, in radians, of x.
//
// Special case is:
//  acos(x) = nan if x < -1 or x > 1
//
//jule:inline
pub fn acos(x: f64) f64 {
	ret PI/2 - asin(x)
}
