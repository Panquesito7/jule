// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// The original C code, the long comment, and the constants
// below are from FreeBSD's /usr/src/lib/msun/src/s_asinh.c
// and came with this notice. The Jule code is a simplified
// version of the original C.
//
// ====================================================
// Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
//
// Developed at SunPro, a Sun Microsystems, Inc. business.
// Permission to use, copy, modify, and distribute this
// software is freely granted, provided that this notice
// is preserved.
// ====================================================
//
//
// asinh(x)
// Method :
//  Based on
//          asinh(x) = sign(x) * log [ |x| + sqrt(x*x+1) ]
//  we have
//  asinh(x) := x  if  1+x*x=1,
//           := sign(x)*(log(x)+ln2)) for large |x|, else
//           := sign(x)*log(2|x|+1/(|x|+sqrt(x*x+1))) if|x|>2, else
//           := sign(x)*log1p(|x| + x**2/(1 + sqrt(1+x**2)))
//

// Returns the inverse hyperbolic sine of x.
//
// Special cases are:
//  asinh(±0) = ±0
//  asinh(±inf) = ±inf
//  asinh(nan) = nan
pub fn asinh(x: f64) f64 {
	const LN2       = 6.93147180559945286227e-01 // 0x3FE62E42FEFA39EF
	const NEAR_ZERO = 1.0 / (1 << 28)            // 2**-28
	const LARGE     = 1 << 28                    // 2**28

	// special cases
	if isnan(x) || isinf(x, 0) {
		ret x
	}
	let sign = false
	if x < 0 {
		x = -x
		sign = true
	}
	let temp: f64
	match {
	case x > LARGE:
		temp = log(x) + LN2 // |x| > 2**28
	case x > 2:
		temp = log(2*x + 1/(sqrt(x*x+1)+x)) // 2**28 > |x| > 2.0
	case x < NEAR_ZERO:
		temp = x // |x| < 2**-28
	default:
		temp = log1p(x + x*x/(1+sqrt(1+x*x))) // 2.0 > |x| > 2**-28
	}
	if sign {
		temp = -temp
	}
	ret temp
}
