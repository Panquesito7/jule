// Copyright 2022 The X Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

//doc:
// Returns integer and fractional floating-point numbers
// that sum to f. Both values have the same sign as f.
//
// Special cases are:
//  modf(±inf) = ±inf, nan
//  modf(nan) = nan, nan
pub modf(f f64) [integer, frac f64] {
	if f < 1 {
		match {
		case f < 0:
			integer, frac = modf(-f)
			ret -integer, -frac
		case f == 0:
			ret f, f // Return -0, -0 when f == -0
		}
		ret 0, f
	}

	x: = f64_bits(f)
	e: = uint(x>>SHIFT)&MASK - BIAS

	// Keep the top 12+e bits, the integer part; clear the rest.
	if e < 64-12 {
		x &= ~(1<<uint(64-12-e) - 1)
	}
	integer = f64_from_bits(x)
	frac = f - integer
	ret
}
