// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::fs::{File}
use std::io::{STDOUT}

// Prints arguments to file by default formatting.
// See documentation of format function for formatting.
pub fn fprint(mut f: &File, args: ...any) {
    for _, arg in args {
        f.write(fmt_by_default(arg))
    }
}

// Prints arguments to file by default formatting.
// Prints new-line after arguments.
// See documentation of format function for formatting.
pub fn fprintln(mut f: &File, args: ...any) {
    fprint(f, args...)
    fprintf(f, "\n")
}

// Prints result of formatting to file.
// See documentation of format function for formatting.
pub fn fprintf(mut f: &File, fmt: str, args: ...any) {
    f.write(format_bytes(fmt, args...))
}

// Prints result of formatting to stdout.
// See documentation of format function for formatting.
pub fn printf(fmt: str, args: ...any) { fprintf(STDOUT, fmt, args...) }

// Prints arguments by default formatting to stdout.
pub fn print(args: ...any) { fprint(STDOUT, args...) }

// Prints arguments by default formatting to stdout.
// Prints new-line after arguments.
pub fn println(args: ...any) { fprintln(STDOUT, args...) }

// Returns string result of arguments by default formatting.
pub fn sprint(args: ...any): str {
    let mut bytes: []byte = nil
    for _, arg in args {
        bytes = append(bytes, fmt_by_default(arg)...)
    }
    ret str(bytes)
}
