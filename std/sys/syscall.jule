// Copyright 2023 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use cpp "<cstdio>"
use cpp "<sys/stat.h>"

cpp type _mode_t: uint
cpp type _off_t: uint

cpp struct stat{
	st_mode: cpp._mode_t
	st_size: cpp._off_t
}

//jule:typedef
cpp struct FILE{}

cpp unsafe fn fseek(mut f: *cpp.FILE, offset: u64, origin: int): int
cpp unsafe fn fread(dest: *unsafe, element_size: uint, count: uint, mut f: *cpp.FILE): uint
cpp unsafe fn ftell(mut f: *cpp.FILE): u64
cpp unsafe fn fclose(mut f: *cpp.FILE): int
cpp fn lseek(handle: int, offset: i64, origin: int): i64
cpp fn tell(handle: int): i64
cpp unsafe fn read(handle: int, dest: *unsafe, n: uint): int
cpp fn close(handle: int): int
cpp unsafe fn write(handle: int, buff: *unsafe, n: uint): int

// Wrapper for C's stat.
pub struct Stat {
	pub st_mode: uint
	pub st_size: uint
}

// Wrapper for C's file.
pub struct File {
	handle: *cpp.FILE
}

impl File {
	// Returns handle as uintptr.
	pub fn addr(self): uintptr { ret uintptr(self.handle) }

	// Calls C's fread function with handle.
	// Returns 0 if handle is nil.
	pub fn fread(mut self, mut buffer: []byte, count: uint): uint {
		if self.handle == nil {
			ret 0
		}
		ret unsafe { cpp.fread(&buffer[0], (uint)(buffer.len), count, self.handle) }
	}

	// Calls C's fseek function with handle.
	// Returns 0 if handle is nil.
	pub fn fseek(mut self, offset: u64, origin: int): int {
		if self.handle == nil {
			ret 0
		}
		ret unsafe { cpp.fseek(self.handle, offset, origin) }
	}

	// Calls C's ftell function with handle.
	// Returns 0 if handle is nil.
	pub fn ftell(mut self): u64 {
		if self.handle == nil {
			ret 0
		}
		ret unsafe { cpp.ftell(self.handle) }
	}

	// Calls C's fclose function with handle.
	// Returns 0 if handle is nil.
	pub fn fclose(mut self): int {
		if self.handle == nil {
			ret 0
		}
		let code = unsafe { cpp.fclose(self.handle) }
		self.handle = nil
		ret code
	}
}

// Wrapper for C's lseek function.
pub fn lseek(handle: int, offset: i64, origin: int): i64 {
	ret cpp.lseek(handle, offset, origin)
}

// Wrapper for C's tell function.
pub fn tell(handle: int): i64 { ret cpp.tell(handle) }

// Wrapper for C's read function.
pub fn read(handle: int, mut buff: []byte): int {
	ret unsafe { cpp.read(handle, &buff[0], uint(buff.len)) }
}

// Wrapper for C's close function.
pub fn close(handle: int): int { ret cpp.close(handle) }

// Wraooer for C's write function.
pub fn write(handle: int, buff: []byte): int {
	ret unsafe { cpp.write(handle, &buff[0], uint(buff.len)) }
}
