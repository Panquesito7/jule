// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::integrated::{Wchar}
use std::unicode::utf16::{decode}

cpp use "<dirent.h>"

//jule:typedef
cpp struct _WDIR{}

cpp struct _wdirent {
    pub d_name: *Wchar
}

cpp fn GetStdHandle(stdh: uintptr): *unsafe
cpp unsafe fn CloseHandle(stdh: *unsafe): bool
cpp unsafe fn wstat(path: *Wchar, mut handle: *cpp.stat): int
cpp unsafe fn _wopendir(path: *Wchar): *cpp._WDIR
cpp unsafe fn _wclosedir(mut dir: *cpp._WDIR): int
cpp unsafe fn _wreaddir(mut dir: *cpp._WDIR): *cpp._wdirent
cpp unsafe fn _wopen(path: *Wchar, flag: int, mode: int): int
cpp fn GetLastError(): u32
cpp unsafe fn GetCurrentDirectoryW(bufflen: u32, buff: *Wchar): u32
cpp unsafe fn SetCurrentDirectoryW(path: *Wchar): bool
cpp unsafe fn GetFullPathNameW(path: *Wchar, bufflen: u32, buff: *Wchar, fname: **Wchar): u32
cpp unsafe fn DeleteFileW(path: *Wchar): bool
cpp unsafe fn CreateDirectoryW(path: *Wchar, pass_null_here: *bool): bool
cpp unsafe fn RemoveDirectoryW(path: *Wchar): bool

// C's _WDIR.
pub type Wdir: cpp._WDIR

// C's _wdirent.
pub type Wdirent: cpp._wdirent

pub type handle: uintptr

pub const INVALID_HANDLE = ^handle(0)

pub static STDIN: handle  = get_std_handle(uintptr(STD_INPUT_HANDLE))
pub static STDOUT: handle = get_std_handle(uintptr(STD_OUTPUT_HANDLE))
pub static STDERR: handle = get_std_handle(uintptr(STD_ERROR_HANDLE))

// Returns the UTF-8 encoding of the UTF-16 sequence s,
// with a terminating NULL removed. Returns empty string
// if s is nil.
pub fn utf16_to_str(s: []u16): str {
    if s == nil {
        ret ""
    }
    let mut code_page = unsafe { *(&s) }
    for i, v in s {
        if v == 0 {
            code_page = code_page[0:i]
            break
        }
    }
    ret str(decode(code_page))
}

// Returns the UTF-8 encoding of the UTF-16 sequence s in *u16 form,
// with a terminating NULL removed. Returns empty string if s is nil.
pub unsafe fn u16_ptr_to_str(s: *u16): str {
    if s == nil {
        ret ""
    }

    let mut code_page: []u16 = nil
    let mut i = 0
    for ; i++ {
        let r = (u16)(s[i])
        if r == 0 {
            ret str(decode(code_page))
        }
        code_page = append(code_page, r)
    }
    ret ""
}

pub fn get_std_handle(stdh: uintptr): handle { ret handle(cpp.GetStdHandle(stdh)) }
pub unsafe fn close_handle(stdh: handle): bool { ret cpp.CloseHandle(unsafe { (*unsafe)(stdh) }) }

// Calls C's wstat function.
pub unsafe fn wstat(path: *u16, mut stat: *Stat): int {
    ret cpp.wstat((*Wchar)(path), stat)
}

// Wrapper for C's _wopen function.
pub unsafe fn _wopen(path: *u16, flag: int, mode: int): int {
    ret cpp._wopen((*Wchar)(&path[0]), flag, mode)
}

// Returns last Windows error.
pub fn get_last_error(): u32 { ret cpp.GetLastError() }

// Reads working directory into buff and returns readed
// rune count of current process. Returns 0 if fail.
pub unsafe fn get_current_directory(bufflen: u32, mut buff: *u16): u32 {
    ret cpp.GetCurrentDirectoryW(bufflen, (*Wchar)(buff))
}

// Sets working directory to path.
// Reports operation is success.
pub unsafe fn set_current_directory(path: *u16): bool {
    ret cpp.SetCurrentDirectoryW((*Wchar)(path))
}

// Delete file.
pub unsafe fn delete_file(path: *u16): bool {
    ret cpp.DeleteFileW((*Wchar)(path))
}

// Creates directory.
pub unsafe fn create_directory(path: *u16): bool {
    ret cpp.CreateDirectoryW((*Wchar)(path), nil)
}

// Removes empty directory.
pub unsafe fn remove_directory(path: *u16): bool {
    ret cpp.RemoveDirectoryW((*Wchar)(path))
}

// Calls C's _wopendir function.
pub unsafe fn _wopendir(path: *u16): *Wdir { ret cpp._wopendir((*Wchar)(path)) }

// Calls C's _wreaddir function.
pub unsafe fn _wreaddir(mut dir: *Wdir): *Wdirent { ret cpp._wreaddir(dir) }

// Calls C's _wclosedir function.
pub unsafe fn _wclosedir(mut dir: *Wdir): int { ret cpp._wclosedir(dir) }

// Calls Windows's GetFullPathNameW function.
pub unsafe fn get_full_path_name(path: *u16, bufflen: u32, 
    buff: *u16, fname: **u16): u32 {
    ret cpp.GetFullPathNameW((*Wchar)(path), bufflen, (*Wchar)(buff), (**Wchar)(fname))
}
