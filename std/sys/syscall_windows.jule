// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::unicode::utf16::{append_rune, decode}

use cpp "<dirent.h>"

cpp type wchar_t: u16

//jule:typedef
cpp struct _WDIR{}

cpp struct _wdirent {
	pub d_name: *cpp.wchar_t
}

cpp fn GetStdHandle(stdh: uintptr): *unsafe
cpp unsafe fn CloseHandle(stdh: *unsafe): bool
cpp unsafe fn wstat(path: *cpp.wchar_t, handle: *cpp.stat): (err: int)
cpp unsafe fn _wopendir(path: *cpp.wchar_t): *cpp._WDIR
cpp unsafe fn _wclosedir(mut dir: *cpp._WDIR): int
cpp unsafe fn _wreaddir(mut dir: *cpp._WDIR): *cpp._wdirent
cpp fn _wfopen(path: *cpp.wchar_t, mode: *cpp.wchar_t): *cpp.FILE

pub type handle: uintptr

pub const INVALID_HANDLE = ^handle(0)

pub let STDIN  = get_std_handle(uintptr(STD_INPUT_HANDLE))
pub let STDOUT = get_std_handle(uintptr(STD_OUTPUT_HANDLE))
pub let STDERR = get_std_handle(uintptr(STD_ERROR_HANDLE))

// Wrapper for C's _WDIR.
pub struct Dir {
	handle: *cpp._WDIR
}

impl Dir {
	// Returns handle as uintptr.
	pub fn addr(self): uintptr {
		ret uintptr(self.handle)
	}

	// Calls C's _wclosedir function with handle.
	// Returns 0 if handle is nil.
	pub fn close(mut self): int {
		if self.addr() == 0 {
			ret 0
		}
		ret unsafe { cpp._wclosedir(self.handle) }
	}

	// Calls C's _wreaddir function with handle and returns Dirent.
	// Returns nil reference if handle is nil or _wreaddir returns nil.
	pub fn read(mut self): (dirent: &Dirent) {
		if self.addr() != 0 {
			let mut handle = unsafe { cpp._wreaddir(self.handle) }
			if handle != nil {
				dirent = &Dirent{handle: handle}
			}
		}
		ret
	}
}

// Wrapper for C's _wdirent.
pub struct Dirent {
	handle: *cpp._wdirent
}

impl Dirent {
	// Returns handle as uintptr.
	pub fn addr(self): uintptr {
		ret uintptr(self.handle)
	}

	// Returns d_name field of handle as string.
	// Returns empty string if handle is nil.
	pub fn name(self): str {
		if self.addr() == 0 {
			ret ""
		}
		ret unsafe { wchar_to_str(self.handle.d_name) }
	}
}

// Returns the UTF-16 encoding of the UTF-8 string
// s, with a terminating NULL added. If s includes NULL
// character at any location, ignores followed characters.
pub fn utf16_from_str(s: str): []u16 {
	// In the worst case all characters require two u16.
	// Also account for the terminating NULL character.
	// See: C Strings and Windows UTF16.

	const NULL_TERMINATION = '\x00'
	let mut buf: []u16 = nil
	let runes = ([]rune)(s)
	for _, r in runes {
		if r == NULL_TERMINATION {
			break
		}
		buf = append_rune(buf, r)
	}
	ret append_rune(buf, NULL_TERMINATION)
}

// Returns the UTF-8 encoding of the UTF-16 sequence s,
// with a terminating NULL removed.
pub fn utf16_to_str(s: []u16): str {
	let mut code_page = unsafe { *(&s) }
	for i, v in s {
		if v == 0 {
			code_page = code_page[0:i]
			break
		}
	}
	ret (str)(decode(code_page))
}

// Returns the UTF-8 encoding of the UTF-16 sequence s in *wchar_t form,
// with a terminating NULL removed.
unsafe fn wchar_to_str(s: *cpp.wchar_t): str {
	let mut i = 0
	let mut code_page: []u16 = nil
	for {
		let r = unsafe { s[i] }
		code_page = append[u16](code_page, r)
		i += 1
		if r == 0 {
			ret (str)(decode(code_page))
		}
	}
	ret ""
}

pub fn get_std_handle(stdh: uintptr): handle { ret handle(cpp.GetStdHandle(stdh)) }
pub unsafe fn close_handle(stdh: handle): bool { ret cpp.CloseHandle(unsafe { (*unsafe)(stdh) }) }

// Returns nil reference if error occurs.
pub fn stat(path: str): (stat: &Stat) {
	let utf16_path = utf16_from_str(path)
	let mut handle = cpp.stat{}
	if (unsafe { cpp.wstat((*cpp.wchar_t)(&utf16_path[0]), &handle) } == 0) {
		stat = &Stat{
			st_mode: handle.st_mode,
			st_size: handle.st_size,
		}
	}
	ret
}

// Returns nil reference if error occurs.
pub fn open_dir(path: str): &Dir {
	let utf16_path = utf16_from_str(path)
	let mut handle = unsafe { cpp._wopendir((*cpp.wchar_t)(&utf16_path[0])) }
	if handle == nil {
		ret new(Dir)
	}
	ret &Dir{handle: handle}
}

// Calls C's _wfopen function.
// Returns nil reference if error occurs.
// or C's _wfopen function returns nil pointer.
pub fn fopen(path: str, mode: str): &File {
	let utf16_path = utf16_from_str(path)
	let utf16_mode = utf16_from_str(mode)
	let handle = unsafe {
		cpp._wfopen((*cpp.wchar_t)(&utf16_path[0]),
					(*cpp.wchar_t)(&utf16_mode[0]))
	}
	if handle == nil {
		ret new(File)
	}
	ret &File{handle: handle}
}
