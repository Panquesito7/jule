// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::errors

//doc: Indicates that a value is out of range for the target type.
pub ERROR_RANGE: = std::errors::new("value out of range")

//doc: Indicates that a value does not have the right syntax for the target type.
pub ERROR_SYNTAX: = std::errors::new("invalid syntax")

//doc: Records a failed conversion.
pub struct ConvError {
	Func : str    // the failing function
	Input: str    // the input
	Error: Error  // the reason the conversion failed
}

impl Error for ConvError {
	@inline
	&error() str {
		ret "std::conv::" + .Func + ": " + "parsing " + .Input + ": " + .Error.error()
	}
}

impl ConvError {
	@inline
	pub &unwrap() Error {
		ret .Error
	}
}

@inline
syntax_error(fn: str, input: str) ConvError {
	ret ConvError{
		Func: fn,
		Input: input,
		Error: ERROR_SYNTAX,
	}
}

@inline
range_error(fn: str, s: str) ConvError {
	ret ConvError{
		Func: fn,
		Input: s,
		Error: ERROR_RANGE,
	}
}

@inline
base_error(fn: str, s: str, base: int) ConvError {
	ret ConvError{
		Func: fn,
		Input: s,
		Error: std::errors::new("invalid base " + itoa(base)),
	}
}

@inline
bit_size_error(fn: str, s: str, bit_size: int) ConvError {
	ret ConvError{
		Func: fn,
		Input: s,
		Error: std::errors::new("invalid bit size " + itoa(bit_size)),
	}
}
