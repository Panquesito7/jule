// Copyright 2022 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::errors

// Indicates that a value is out of range for the target type.
pub let ERROR_RANGE = std::errors::new("value out of range")

// Indicates that a value does not have the right syntax for the target type.
pub let ERROR_SYNTAX = std::errors::new("invalid syntax")

// Records a failed conversion.
pub struct ConvError {
	pub func : str   // the failing function
	pub input: str   // the input
	pub err: Error // the reason the conversion failed
}

impl Error for ConvError {
	fn error(self) str {
		ret "std::conv::" + self.func + ": " + "parsing " + self.input + ": " + self.err.error()
	}
}

impl ConvError {
	pub fn unwrap(&self) Error {
		ret self.err
	}
}

fn syntax_error(func: str, input: str) &ConvError {
	ret &ConvError{
		func: func,
		input: input,
		err: ERROR_SYNTAX,
	}
}

fn range_error(func: str, s: str) &ConvError {
	ret &ConvError{
		func: func,
		input: s,
		err: ERROR_RANGE,
	}
}

fn base_error(func: str, s: str, base: int) &ConvError {
	ret &ConvError{
		func: func,
		input: s,
		err: std::errors::new("invalid base " + itoa(base)),
	}
}

fn bit_size_error(func: str, s: str, bit_size: int) &ConvError {
	ret &ConvError{
		func: func,
		input: s,
		err: std::errors::new("invalid bit size " + itoa(bit_size)),
	}
}
