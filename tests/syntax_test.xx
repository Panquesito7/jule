#pragma enofi
// X test codes

//cxx: #define TEST_CXX_EMBED

type TEST_TYPE_ALIAS i32

//doc: Test for global variable.
TEST_GLOBAL: = 10;
//doc: Test for global constant variable.
const TEST_CONST: = 20
volatile TEST_VOLATILE: = 5

@inline
//doc: Test for inline function.
test_inline_function() {}

test_string_concat() {
	_ = "Hello" + " " + "World!"
}

test_intergers() {
	_ = 13e+1
	_ = 3536
	_ = 0x0FDDA24
	_ = 05353
}

test_variable() {
	a:int
	_ = a
	x: = 10;
	x = 100
	outln(x);
}

test_assignment() {
	x: = 10
	x += 100;
}

test_slice() {
	my_slice: = [][]str{
		[]str{"Apple", "Banana"},
		[]str{"Bred", "Cheese"},
	};
	outln(
		my_slice[0]
	)
}

test_array() {
	my_array:[2][3]str = [2][3]str{
		[3]str{"Apple", "Banana", "TEST"},
		[3]str{"Bred", "Cheese", "BLA"},
	};
	outln(
		my_array[0]
	)
}

test_anonymous_function() {
	my_func:() = () {
		outln("Hello World!")
	}
	my_func()
	rf: = () i32 {
		ret 90
	}()
	_ = rf
	(&() {
		outln("Anonymous Outln")
	})()
	a: = 0
	_ = a
}

test_multiple_variable() {
	a:int = 10;
	a, b:, _, c:bool = 100, 200, nil, false
	_ = c
	a, b = 10, 20
	a, b = b, a
	outln(a)
	outln(b)
	a, b, _ = test_multiple_return()
}

test_multiple_return() [i32, i32, bool] { 5, 5, false }

test_iter() {
	// Infinity iteration
	iter {
		break
		continue
	}

	// While iteration
	iter !false {
		break
	}

	// Foreach iteration
	iter in "Hello" {
		outln("X")
	}

	iter index:i32 in "Hello" {
		outln(index)
	}

	iter _, c: in "Hello" {
		outln(c)
	}

	iter _, element:str in ([]str{"The", "X", "Programming", "Language"}) {
		outln(element)
	}

	iter index: in "TEST" {
		_ = index
	}

	iter , , { break }

	iter a: = 0, a <= 3, a++ {
		outln(a)
	}
}

test_if_expressions() {
	if true {
		outln("IF")
	} else if true { outln("ELSE_IF0") } else if false {
		outln("ELSE_IF_1")
		if true == true
			{ outln("ELSE_IF_1_IF"); }
		else {
			outln("ELSE");
		}
	} else {
		outln("ELSE")
	}
}

test_parameters(a i32, b bool) {}

test_parameters_2(a, b i32, c, d bool) {}

test_variadic_parameters(ln_every bool, ...values i32) {
	iter _, i: in values {
		if ln_every { outln(i) }
		else        { out(i) }
	}
}

test_variadic_parameters_2(...str) {}

test_casting() {
	a:*int
	_ = (uintptr)(a)
	_ = (f32)(5000)
	bytes: = ([]byte)("Hello Bytes")
	outln(bytes)
	outln((str)(bytes))
}

test_assignment_expression() {
	x:i32 = 10
	outln((x*=10))
}

test_raw_string() {
	_ = `Hello
	raw`

	_ = `
  strings`
}

test_cxx_embed() {
	//cxx: std::wcout << L"Hello cxx embeds" << std::endl;
}

test_map() {
	map: = [int:str]{
		0: "The",
		1: "X",
		2: "Programming",
		3: "Language"
	}
	map[4] = "Maps"
	outln(map)
	iter key:, value: in map {
		out(key)
		out(": ")
		outln(value)
	}
}

test_multiple_return_as_arguments() {
	test: = (a i32, b str, c byte) {
		outln(a)
		outln(b)
		outln(c)
	}
	multiret: = () [i32, str, byte] { 134, "STR", 'B' }
	test(multiret())
}

test_multiple_return_as_multiple_return() {
	test1: = () [i32, str, byte] { 143, "STR", 'W' }
	test2: = () [i32, str, byte] { ret test1() }
	a:, b:, c: = test2()
	outln(a)
	outln(b)
	outln(c)
}

test_inblock_type_alias() {
	type integer i32
	x:integer = 10
	_ = x
}

test_inblock_block() {
	{
		outln("INBLOCK_BLOCK")
	}
}

test_deferred_calls() {
	defer () { outln("Defer 1") }()
	defer () { outln("Defer 2") }()
}

test_goto() {
	s: = "Hello World"
	{
		ok: = false
		{
			if !ok {
				ok = true
				goto bla
			}
			goto test
		}
	bla:
		outln(ok)
	}
test:
	{
		outln("TEST")
		goto end
	}
	outln(s)
end:
}

enum test_enum {
	item1,
	item2,
	item3 = 369,
	item4,
}

struct test_struct {
	a:str
	b:i32
	c:     = 10
	d:bool = false
}

impl test_struct {
	func1() {
		self.a = "test"
	}

	type[T1]
	func2() {
		self.d = !self.d
	}
}

type[T]
test_generic_func(a, b T) T { a+b }

test_ret_vars() [x int] { ret }

test_suffix() {
	a: = 10
	a++
	a--
	outln((a++))
}

test_match_case() {
	match 10 {
	case 1:
		outln("one")
	case 2:
		outln("two")
	default:
		outln("default")
	}

	match {
	case false:
		outln("false")
	case !true:
		outln("!true")
	case false, true:
		outln("false, true")
	default:
		outln("default")
	}
}

init() {
	outln("Syntax Test")
}

//doc:
// Entry point function of program.
main() {
	test_inline_function()
	test_intergers()
	test_string_concat();
	test_variable();
	test_assignment()
	test_slice()
	test_array()
	test_anonymous_function()
	test_multiple_variable();
	test_iter()
	test_if_expressions();
	test_parameters(24, false)
	test_parameters_2(24, 52, true, false)
	test_variadic_parameters(true);
	test_variadic_parameters(true, 10, 20);
	test_variadic_parameters(!false, []i32{1, 2, 3, 4, 5}...)
	test_variadic_parameters_2()
	test_variadic_parameters_2("TEST", "TEST_1")
	test_casting()
	test_assignment_expression()
	test_raw_string()
	test_cxx_embed()
	test_map()
	test_multiple_return_as_arguments()
	test_multiple_return_as_multiple_return()
	test_inblock_type_alias()
	test_inblock_block()
	test_deferred_calls()
	test_goto()
	outln(test_enum.item3)
	test_generic_func[int](2, -30)
	test_generic_func[uint](6, 2)
	test_generic_func[f64](4.2, 35.23)
	test_match_case()
}
