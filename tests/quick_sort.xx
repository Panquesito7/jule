// Copyright 2022 The X Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

#pragma enofi

partition(&slice []int, low, high int) int {
	pivot: = slice[high]
	i: = low - 1
	for j: = low, j < high, j++ {
		if (slice[j] <= pivot) {
			i++
			slice[i], slice[j] = slice[j], slice[i]
		}
	}
	slice[i + 1], slice[high] = slice[high], slice[i + 1]
	ret i + 1
}

quicksort(&slice []int) {
	if slice.len <= 1 {
		ret
	}
	p: = partition(slice, 0, slice.len-1)
	partition(slice, 0, p - 1)
	partition(slice, p + 1, slice.len-1)
}

main() {
	my_slice: = []int{1, 9, -2, 25, -24, 4623, 0, -1, 0xFD2}
	outln(my_slice)
	quicksort(my_slice)
	outln(my_slice)
}
