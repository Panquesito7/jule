// Copyright 2022 The X Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

//doc:
// Allocates n memory by sizeof specified data-type.
// The allocated memory initialized with zero (0) value.
// 
// Special cases are;
//   calloc[Alloc_T](n) = nil if n == 0
//   calloc[Alloc_T](n) = nil if allocation failed
type[Alloc_T]
pub calloc(const n size) *Alloc_T {
	if n == 0 { ret nil }
	allocation:*Alloc_T
	//cxx: @allocation = (@Alloc_T*)(std::calloc(@n, sizeof(@Alloc_T)));
	allocation
}

//doc:
// Allocates memory by specified size.
// The allocated memory is not initialized.
//
// Special cases are;
//   malloc(size) = nil if n == 0
//   malloc(size) = nil if allocation failed
pub malloc(const size size) voidptr {
	if size == 0 { ret nil }
	allocation:voidptr
	//cxx: @allocation = std::malloc(@size);
	allocation
}

//doc:
// Allocates memory by specified size.
// The allocated memory is not initialized.
//
// Special cases are;
//   realloc(ptr, size) = nil if ptr == nil
//   realloc(ptr, size) = nil if allocation failed
pub realloc(ptr voidptr, const size size) voidptr {
	if !ptr { ret nil }
	//cxx: @ptr = std::realloc(@ptr, @size);
	ptr
}
