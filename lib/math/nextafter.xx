// Copyright 2022 The X Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

//doc:
// Returns the next representable f64 value after x towards y.
//
// Special cases are:
//  nextafter(x, x)   = x
//  nextafter(nan, y) = nan
//  nextafter(x, nan) = nan
pub nextafter(const x, const y f64) [r f64] {
	match {
	case isnan(x) || isnan(y): // special case
		r = nan()
	case x == y:
		r = x
	case x == 0:
		r = copysign(f64_from_bits(1), y)
	case (y > x) == (x > 0):
		r = f64_from_bits(f64_bits(x) + 1)
	default:
		r = f64_from_bits(f64_bits(x) - 1)
	}
	ret
}
