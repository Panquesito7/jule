// Copyright 2022 The X Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

//doc:
// Returns the minimum number of bits required to represent x;
// the result is 0 for x == 0.
@inline
pub len8(const x u8) int {
	ret int(len8tab[x])
}

//doc:
// Returns the minimum number of bits required to represent x;
// the result is 0 for x == 0.
pub len16(x u16) [n int] {
	if x >= 1<<8 {
		x >>= 8
		n = 8
	}
	ret n + int(len8tab[x])
}

//doc:
// Returns the minimum number of bits required to represent x;
// the result is 0 for x == 0.
pub len32(x u32) [n int] {
	if x >= 1<<16 {
		x >>= 16
		n = 16
	}
	if x >= 1<<8 {
		x >>= 8
		n += 8
	}
	ret n + int(len8tab[x])
}

//doc:
// Returns the minimum number of bits required to represent x;
// the result is 0 for x == 0.
pub len64(x u64) [n int] {
	if x >= 1<<32 {
		x >>= 32
		n = 32
	}
	if x >= 1<<16 {
		x >>= 16
		n += 16
	}
	if x >= 1<<8 {
		x >>= 8
		n += 8
	}
	ret n + int(len8tab[x])
}

//doc:
// Returns the 64-bit product of x and y: (hi, lo) = x * y
// with the product bits' upper half returned in hi and the lower
// half returned in lo.
//
// This function's execution time does not depend on the inputs.
pub mul32(const x, const y u32) [hi u32, lo u32] {
	tmp: = u64(x) * u64(y)
	hi, lo = u32(tmp>>32), u32(tmp)
	ret
}
