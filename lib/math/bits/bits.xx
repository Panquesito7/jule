// Copyright 2022 The X Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Package bits implements bit counting and manipulation
// functions for the predeclared unsigned integer types.

// --- LeadingZeros ---

//doc: Returns the number of leading zero bits in x; the result is 8 for x == 0.
@inline
pub leading_zeros8(const x u8) int { ret 8 - len8(x) }

//doc: Returns the number of leading zero bits in x; the result is 16 for x == 0.
@inline
pub leading_zeros16(const x u16) int { ret 16 - len16(x) }

// --- Len ---

//doc:
// Returns the minimum number of bits required to represent x;
// the result is 0 for x == 0.
@inline
pub len8(const x u8) int {
	ret int(len8tab[x])
}

//doc:
// Returns the minimum number of bits required to represent x;
// the result is 0 for x == 0.
pub len16(x u16) [n int] {
	if x >= 1<<8 {
		x >>= 8
		n = 8
	}
	ret n + int(len8tab[x])
}

//doc:
// Returns the minimum number of bits required to represent x;
// the result is 0 for x == 0.
pub len32(x u32) [n int] {
	if x >= 1<<16 {
		x >>= 16
		n = 16
	}
	if x >= 1<<8 {
		x >>= 8
		n += 8
	}
	ret n + int(len8tab[x])
}

//doc:
// Returns the minimum number of bits required to represent x;
// the result is 0 for x == 0.
pub len64(x u64) [n int] {
	if x >= 1<<32 {
		x >>= 32
		n = 32
	}
	if x >= 1<<16 {
		x >>= 16
		n += 16
	}
	if x >= 1<<8 {
		x >>= 8
		n += 8
	}
	ret n + int(len8tab[x])
}

// --- Full-width multiply ---

//doc:
// Returns the 64-bit product of x and y: (hi, lo) = x * y
// with the product bits' upper half returned in hi and the lower
// half returned in lo.
//
// This function's execution time does not depend on the inputs.
pub mul32(const x, const y u32) [hi u32, lo u32] {
	tmp: = u64(x) * u64(y)
	hi, lo = u32(tmp>>32), u32(tmp)
	ret
}

//doc:
// Returns the 128-bit product of x and y: (hi, lo) = x * y
// with the product bits' upper half returned in hi and the lower
// half returned in lo.
//
// This function's execution time does not depend on the inputs.
pub mul64(const x, const y u64) [hi u64, lo u64] {
	const mask32: = 1<<32 - 1
	x0 := x & mask32
	x1 := x >> 32
	y0 := y & mask32
	y1 := y >> 32
	w0 := x0 * y0
	t := x1*y0 + w0>>32
	w1 := t & mask32
	w2 := t >> 32
	w1 += x0 * y1
	hi = x1*y1 + w2 + w1>>32
	lo = x * y
	ret
}
