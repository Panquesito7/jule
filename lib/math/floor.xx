// Copyright 2022 The X Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

//doc:
// Returns the greatest integer value less than or equal to x.
//
// Special cases are:
//  floor(±0) = ±0
//  floor(±inf) = ±inf
//  floor(nan) = nan
pub floor(const x f64) f64 {
	if x == 0 || isnan(x) || isinf(x, 0) {
		ret x
	}
	if x < 0 {
		d:, fract: = modf(-x)
		if fract != 0.0 {
			d = d + 1
		}
		ret -d
	}
	d:, _ = modf(x)
	ret d
}

//doc:
// Returns the least integer value greater than or equal to x.
//
// Special cases are:
//  ceil(±0) = ±0
//  ceil(±inf) = ±inf
//  ceil(nan) = nan
@inline
pub ceil(const x f64) f64 {
	ret -floor(-x)
}

//doc:
// Returns the integer value of x.
//
// Special cases are:
//  trunc(±0) = ±0
//  trunc(±inf) = ±inf
//  trunc(nan) = nan
pub trunc(const x f64) f64 {
	if x == 0 || isnan(x) || isinf(x, 0) {
		ret x
	}
	d:, _ = modf(x)
	ret d
}

//doc:
// Returns the nearest integer, rounding half away from zero.
//
// Special cases are:
//  round(±0) = ±0
//  round(±inf) = ±inf
//  round(nan) = nan
pub round(const x f64) f64 {
	// round is a faster implementation of:
	//
	// pub round(const x f64) f64 {
	//   t: = trunc(x)
	//   if abs(x-t) >= 0.5 {
	//       ret t + copysign(1, x)
	//   }
	//   ret t
	// }
	bits: = f64_bits(x)
	e := uint(bits>>shift) & mask
	if e < bias {
		// Round abs(x) < 1 including denormals.
		bits &= sign_mask // +-0
		if e == bias-1 {
			bits |= uvone // +-1
		}
	} else if e < bias+shift {
		// Round any abs(x) >= 1 containing a fractional component [0,1).
		//
		// Numbers with larger exponents are returned unchanged since they
		// must be either an integer, infinity, or NaN.
		const HALF: = 1 << (shift - 1)
		e -= bias
		bits += HALF >> e
		bits &= ~(frac_mask >> e)
	}
	ret f64_from_bits(bits)
}
